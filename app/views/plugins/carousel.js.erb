
function cspInitCarousel ($, $container, preSelectedStoryIndex, subdomain) {

  // disable horizontal mouse/trackpad scrolling
  $container.find('.row-horizon').css('overflow-x', 'hidden');

  var $carousel = $container.find('.row-horizon'),
      $columns = $carousel.children(),
      $stories = $columns.children(),
      storyWidth = $stories.first().width() + 15, // +
                   // parseInt( $columns.first().css('padding-left'), 10 ) +
                   // parseInt( $columns.first().css('padding-right'), 10 ),
      $pagination = $container.find('.cs-carousel__pagination'),
      $paginationXs = $container.find('.cs-carousel__pagination-xs'),
      currentStoryIndex,  // this is set before adjusting
      numPages, pageWidth,  // these are set after adjusting
      currentPage = 0,  // 0-based paging
      initialAdjust = true,
      currentDevice = $(window).width() < 768 ? 'xs' :
                       ( $(window).width() < 992 ? 'sm' :
                         ( $(window).width() < 1200 ? 'md' : 'lg' ) ),
      scrollToStory = $.Deferred(),
      arrowLeft = function () {
        if (currentPage !== 0) {
          currentPage -= 1;
          var scrollTime = Math.round($carousel.width() / 2);
          [ $pagination, $paginationXs ].forEach(function ($p) {
            $p.children('.cs-carousel__page-dot--current')
              .removeClass('cs-carousel__page-dot--current');
            $p.children('.cs-carousel__page-dot')
              .eq(currentPage)
                .addClass('cs-carousel__page-dot--current');
          });
          $carousel.animate({ scrollLeft: '-=' + $carousel.css('width') }, scrollTime);
          $container
            .find('.cs-carousel__page-count-xs')
              .text((currentPage + 1).toString() + ' of ' + numPages.toString())
        }
      },
      // need to have the ability to scroll to a pre-selected story here, else the closing action
      // is wonky because the story card isn't on the screen
      arrowRight = function (e, toIndex) {
        var $preSelectedStoryCard = toIndex && $carousel.find('a').eq(toIndex);
        if (currentPage !== numPages - 1) {
          currentPage += 1;
          var scrollTime = Math.round($carousel.width() / 2);
          [ $pagination, $paginationXs ].forEach(function ($p) {
            $p.children('.cs-carousel__page-dot--current').removeClass('cs-carousel__page-dot--current');
            $p.children().eq(currentPage).addClass('cs-carousel__page-dot--current');
          });
          $carousel.animate(
            { scrollLeft: '+=' + $carousel.css('width') },
            toIndex ? 0 : scrollTime,
            function () {
              if (toIndex && $preSelectedStoryCard.parent().position().left + $preSelectedStoryCard.outerHeight(true) > $carousel.width()) {
                arrowRight(null, toIndex);
              } else if (toIndex) {
                scrollToStory.resolve();
              }
            }
          );
          $container
            .find('.cs-carousel__page-count-xs')
              .text((currentPage + 1).toString() + ' of ' + numPages.toString())
        }
      },
      adjustColumns = function () {
        // reset auto margins when crossing a bootstrap breakpoint
        var device = $(window).width() < 768 ? 'xs' :
                   ( $(window).width() < 992 ? 'sm' :
                     ( $(window).width() < 1200 ? 'md' : 'lg' ) );
        if (device !== currentDevice) {
          currentDevice = device;
          $stories.css('margin', '0 auto');
        }

        // if margins are adjusted per max gutter, we need to keep track of situations
        // in which the last frame does not have a full number of stories
        // (1 when space for 2 is available, 2 when space for 3)
        var lastIsShortSingle, lastIsShortDouble;

        // need to capture the current story so we can scroll to it after adjusting
        var currentStoryIndex = Math.floor($carousel.prop('scrollLeft') / $columns.first().outerWidth());

        // in case margins were adjusted due to max gutter width, reset them
        $stories.css('margin', '0 auto');

        if ($carousel.width() >= 4 * storyWidth) {
          $columns.css('width', Math.floor($carousel.width() / 4).toString() + 'px');
          if ($columns.length <= 4) {
            $container.find('.cs-carousel__arrow div').hide();
          }

        } else if ($carousel.width() >= 3 * storyWidth) {
          lastIsShortSingle = $columns.length % 3 === 1, lastIsShortDouble = $columns.length % 3 === 2;
          // no scroll arrow if not needed
          if ($columns.length <= 3) {
            $container.find('.cs-carousel_arrow div').hide();
          }
          // adjust columns
          $columns.css('width', Math.floor($carousel.width() / 3).toString() + 'px');
          // adjust story margins (squish them together) if gutter too big
          var minGutterWidth = (subdomain === 'pixlee') ? 30 : 70,
              actualGutterWidth = $columns.first().outerWidth() - $stories.first().width(),
              gutterDelta = actualGutterWidth - minGutterWidth;
          if (actualGutterWidth > minGutterWidth) {
            if (lastIsShortSingle) {
              $columns.last().css('width', $carousel.width());
            } else if (lastIsShortDouble) {
              $columns.slice(-2).css('width', Math.round($carousel.width() / 2).toString() + 'px');
            }
            $stories.each(function (index, column) {
              if (lastIsShortSingle && index === $stories.length - 1) {
                // last frame single, do nothing
              } else if (lastIsShortDouble && index >= $stories.length - 2) {
                // last frame double
                $(this).css('margin-' + (index === $stories.length - 1 ? 'left' : 'right'),
                            Math.round(minGutterWidth / 2) + 'px');
              } else if (index / 3 < 1) {  // first frame
                if (index === 1) {
                  // center story, do nothing
                } else {
                  $(this).css('margin-' + (index === 0 ? 'right' : 'left'),
                              '-=' + gutterDelta.toString() + 'px');
                }
              } else {  // all other groups of three
                if (index % 3 === 1) {
                  // center story, do nothing
                } else {
                  $(this).css('margin-' + (index % 3 === 0 ? 'right' : 'left'),
                              '-=' + gutterDelta.toString() + 'px');
                }
              }
            });
          }

          // make sure currentStoryIndex is valid
          if (lastIsShortSingle && currentStoryIndex > $stories.length - 4) {
            currentStoryIndex = $stories.length - 4;
          }
          else if (lastIsShortDouble && currentStoryIndex > $stories.length - 5) {
            currentStoryIndex = $stories.length - 5;
          }
          else if (currentStoryIndex % 3 === 1) {
            currentStoryIndex -= 1;
          }
          else if (currentStoryIndex % 3 === 2) {
            currentStoryIndex -= 2;
          }

        } else if ($carousel.width() >= 2 * storyWidth) {
          lastIsShortSingle = $columns.length % 2 !== 0;
          // no scroll arrow if not needed
          if ($columns.length <= 2) {
            $container.find('.cs-carousel__arrow div').hide();
          }
          // adjust column size
          $columns.css('width', Math.floor($carousel.width() / 2).toString() + 'px');
          // adjust story margins (squish them together) if gutter too big
          var minGutterWidth = (subdomain === 'pixlee') ? 30 : 70, marginShift = minGutterWidth / 2,
              actualGutterWidth = $columns.first().outerWidth() - $stories.first().width();
          if (actualGutterWidth > minGutterWidth) {
            // if odd number of stories, give last one full width and don't adjust margin below
            if (lastIsShortSingle) {
              $columns.last().css('width', $carousel.width());
            }
            $stories.each(function (index, column) {
              if (lastIsShortSingle && index === $stories.length - 1) {
                // do nothing
              } else {  // per specs of max gutter 70px
                $(this).css('margin-' + (index % 2 === 0 ? 'right' : 'left'), marginShift + 'px');
              }
            });
          }

          if (lastIsShortSingle && currentStoryIndex > $stories.length - 3) {
            currentStoryIndex = $stories.length - 3;
          } else if (currentStoryIndex % 2 === 1) {
            currentStoryIndex -= 1;
          }

        } else {
          $columns.css('width', $carousel.css('width'));
          if ($columns.length === 1) {
            $container.find('.cs-carousel__arrow div').hide();
          }
        }

        // scroll to current story (wherever previous scroll was)
        $carousel.prop('scrollLeft', currentStoryIndex * $columns.first().outerWidth());

        // update number of pages
        numPages = Math.ceil($carousel.prop('scrollWidth') / $carousel.width());
        // reset pagination if this is a resize
        if (!initialAdjust) {
          pageWidth = Math.floor($carousel.prop('scrollWidth') / numPages);
          currentPage = Math.floor($carousel.prop('scrollLeft') / pageWidth);
          [ $pagination, $paginationXs ].forEach(function ($p) {
            $p.empty();
          });
          if (numPages > 8 && $(window).width() <= 500) {
            $paginationXs.append(
              '<span class="cs-carousel__page-count-xs">' + (currentPage + 1).toString() + ' of ' + numPages.toString() + '</span>'
            );
          } else if ($(window).width() <= 500) {
            for (var i = 0; i < numPages; i++) {
              if (i === currentPage) {
                $paginationXs.append("<div class='cs-carousel__page-dot cs-carousel__page-dot--current'></div>");
              } else {
                $paginationXs.append("<div class='cs-carousel__page-dot'></div>");
              }
            }
          } else {
            for (var i = 0; i < numPages; i++) {
              if (i === currentPage) {
                $pagination.append("<div class='cs-carousel__page-dot cs-carousel__page-dot--current'></div>");
              } else {
                $pagination.append("<div class='cs-carousel__page-dot'></div>");
              }
            }
          }
        }
        initialAdjust = false;
      }; // adjust columns
      
  // scroll listeners
  $container.find('.cs-carousel__arrow--left div, .cs-carousel__arrow-xs--left').on('click', arrowLeft);
  $container.find('.cs-carousel__arrow--right div, .cs-carousel__arrow-xs--right').on('click', arrowRight);

  // initial adjustment
  adjustColumns();

  // prev / next navigation
  $('.cs-carousel__prev').on('click', function (e) {
    $('.cs-carousel__next').removeClass('cs-carousel__next--bookend');
    $('.cs-carousel__arrow--left div').trigger('click');
    if (currentPage === 0) {
      $(this).addClass('cs-carousel__prev--bookend')
    }
  })

  $('.cs-carousel__next').on('click', function (e) {
    $('.cs-carousel__prev').removeClass('cs-carousel__prev--bookend')
    $('.cs-carousel__arrow--right div').trigger('click');
    if (currentPage === numPages - 1) {
      $(this).addClass('cs-carousel__next--bookend')
    }
  })

  // set up pagination (numPages calculation needs to be after adjustment)
  numPages = Math.ceil($carousel.prop('scrollWidth') / $carousel.width());
  if (numPages > 8 && $(window).width() <= 500) {
    $paginationXs
      .append('<span class="cs-carousel__page-count-xs">' +
                (currentPage + 1).toString() + ' of ' + numPages.toString() +
              '</span>');
  } else if ($(window).width() <= 500) {
    for (var i = 0; i < numPages; i++) {
      if (i === 0) {
        $paginationXs.append("<div class='cs-carousel__page-dot cs-carousel__page-dot--current'></div>");
      } else {
        $paginationXs.append("<div class='cs-carousel__page-dot'></div>");
      }
    }
  } else {
    for (var i = 0; i < numPages; i++) {
      if (i === 0) {
        $pagination.append("<div class='cs-carousel__page-dot cs-carousel__page-dot--current'></div>");
      } else {
        $pagination.append("<div class='cs-carousel__page-dot'></div>");
      }
    }
  }

  // make adjustments on window resize
  // ref: https://stackoverflow.com/questions/599288
  var resizeTimer;
  var resizeCallback = function () {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(adjustColumns, 100);
  };
  $(window).on('resize', resizeCallback);

  // an open overlay causes adjustment settings to be lost? so we need this...
  // => removed because it was hosing the story counter; doesn't appear to be doing anything anyway, not sure what this was originally about
  // $(document).on('click', '.cs-close', adjustColumns);

  $(window).on('orientationchange', adjustColumns);

  if (preSelectedStoryIndex) {
    var $preSelectedStoryCard = $carousel.find('a').eq(preSelectedStoryIndex);
    if ($preSelectedStoryCard.parent().position().left + $preSelectedStoryCard.outerWidth(true) > $carousel.width()) {
      $.when(scrollToStory).done(function () {
        $container.find('.cs-carousel').css('visibility', 'visible');
        $container[0].scrollIntoView({ block: 'center' });
      });
      arrowRight(null, preSelectedStoryIndex);
    } else {
      $container.find('.cs-carousel').css('visibility', 'visible');
      $container[0].scrollIntoView({ block: 'center' });
    }
  } else {
    $container.find('.cs-carousel').css('visibility', 'visible');
  }

  if (subdomain === 'pixlee' && $container.parent().next().is('div.pagination')) {
    $container.parent().next().remove();
  }


}

