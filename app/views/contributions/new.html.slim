= turbo_frame_tag('new-contribution')

  = form_with( \
      model: @success&.contributions&.build || Contribution.new,
      url: "#{company_contributions_path(@company)}.js",
      format: :js,
      html: { \
        id: 'new-contribution-form',
        autocomplete: 'off',
        novalidate: true,
        data: { \
          controller: 'new-contribution',
          new_contribution_modal_outlet: '#main-modal',
          modal_target: 'form',
          action: 'ajax:beforeSend->new-contribution#validate',
          submit_btn_text: 'Add Contributor' } }) do |form|

    = form.fields_for(:success, @success || form.object.build_success) do |success_fields|
      = success_fields.hidden_field(:id, value: '', disabled: true, data: { new_contribution_target: 'successField' })
      = success_fields.hidden_field(:name, disabled: true, data: { new_contribution_target: 'successName successField' })
      = success_fields.hidden_field( \
          :curator_id,
          value: success_fields.object.curator_id || current_user.id,
          disabled: true,
          data: { new_contribution_target: 'successField' })
      /= success_fields.hidden_field(:customer_id, data: { new_contribution_target: 'successCustomerId' })
      = success_fields.fields_for(:customer, success_fields.object.customer || success_fields.object.build_customer) do |customer_fields|
        = customer_fields.hidden_field(:id, value: '', disabled: true, data: { new_contribution_target: 'customerField'})
        = customer_fields.hidden_field(:name, disabled: true, data: { new_contribution_target: 'customerName customerField' })
        = customer_fields.hidden_field(:company_id, value: @company.id, disabled: true, data: { new_contribution_target: 'customerField' })

      .form-group.required
        = success_fields.label(:customer_id, 'Customer', style: "#{@story ? 'pointer-events:none' : ''}")
        = success_fields.collection_select( \
            :customer_id,
            @company.customers.sort_by { |customer| customer.name.downcase },
            :id,
            :name,
            { include_blank: true }.merge(@customer_id ? { selected: @customer_id } : {}),
            { class: "form-control #{@story ? 'readonly' : ''}",
              placeholder: 'Select or Create',
              required: true,
              data: { \
                controller: 'tomselect',
                new_contribution_target: 'customerSelect requiredField',
                tomselect_kind_value: 'customer',
                tomselect_custom_options_value: { create: true, persist: false },
                tomselect_prevent_focus_value: @story ? true : false,
                action: 'new-contribution#onChangeCustomer',
                field_name: "#{success_fields.object_name}[customer_id]" } })
        span.help-block 
          | Required

      - if @story.present?
        .form-group
          = label_tag("story-#{@story.id}-title", 'Customer Story', style: 'pointer-events:none')
          = select_tag( \
              nil,
              options_for_select([[@story.title, "1"]], selected: 1),
              { id: "story-#{@story.id}-title", 
                class: 'form-control readonly', 
                data: { \
                  controller: 'tomselect',
                  tomselect_prevent_focus_value: true } })

      - else
        .form-group.required data-action="tomselect:dropdown-did-open->new-contribution#filterCustomerWinOptions"
          = form.label(:success_id, 'Customer Win')
          = form.collection_select( \
              :success_id,
              @company.successes.sort_by { |success| success.name },
              :id,
              :name,
              { include_blank: true, selected: @success&.id || [] },
              { class: 'form-control',
                placeholder: 'Select or Create',
                required: true,
                data: { \
                  controller: 'tomselect',
                  tomselect_kind_value: 'customerWin',
                  tomselect_custom_options_value: { create: true, persist: false },
                  new_contribution_target: 'customerWinSelect requiredField',
                  action: 'new-contribution#onChangeCustomerWin',
                  field_name: "#{form.object_name}[success_id]" } })
          span.help-block 
            | Required

      .form-group.required
        = form.label(:contributor_id, 'Contributor')
        = form.collection_select( \
            :contributor_id,
            (@company.contributors + @company.referrers).uniq \
              .sort_by { |contact| contact.last_name } \
              .unshift(User.new(id: 0, first_name: 'New', last_name: 'Contact')),
            :id,
            :full_name,
            { include_blank: true,
              selected: @contributor_id || [],
              disabled: @success ? @success.contributors.map { |contributor| contributor.id } : [] },
            { name: '',
              class: 'form-control',
              placeholder: 'Select or Create',
              required: true,
              data: { \
                controller: 'tomselect',
                tomselect_kind_value: 'contributor',
                new_contribution_target: 'contributorSelect requiredField',
                action: 'new-contribution#onChangeContact',
                field_name: "#{form.object_name}[contributor_id]" } })
        span.help-block 
          | Required

      = render( \
          'companies/shared/new_contact', 
          { parent_form_or_fields: form, controller_id: 'new-contribution', contact_type: 'contributor' })

      .form-group
        = form.label(:invitation_template_id, 'Invitation Template')
        = form.collection_select( \
            :invitation_template_id,
            @company.invitation_templates.sort_by { |t| t.name },
            :id,
            :name,
            { include_blank: true },
            { class: 'form-control',
              placeholder: 'Select',
              data: { \
                controller: 'tomselect',
                tomselect_kind_value: 'invitationTemplate' } })

      .form-group
        = form.label(:referrer_id, 'Referred by')
        = form.collection_select( \
            :referrer_id,
            (@company.contributors + @company.referrers).uniq \
              .sort_by { |contact| contact.last_name } \
              .unshift(User.new(id: 0, first_name: 'New', last_name: 'Contact')),
            :id,
            :full_name,
            { include_blank: true },
            { name: '',
              class: 'form-control',
              placeholder: 'Select or Create',
              data: { \
                controller: 'tomselect',
                tomselect_kind_value: 'referrer',
                new_contribution_target: 'referrerSelect',
                action: 'new-contribution#onChangeContact',
                field_name: "#{form.object_name}[referrer_id]" } })
        span.help-block 
          | Optional

      = render( \
          'companies/shared/new_contact', 
          { parent_form_or_fields: form, controller_id: 'new-contribution', contact_type: 'referrer' })