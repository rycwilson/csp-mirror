
(function () {
  var contribution = <%= raw @contribution.to_json({ only: [:id, :publish_contributor] }) %>,
      contributor = <%= raw @contribution.contributor.to_json({
                      only: [:id, :first_name, :last_name, :email, :title, :phone, :linkedin_url],
                      methods: [:full_name, :previous_changes]
                    }) %>,
      $trContribution = $('tr.shown[data-contribution-id="' + contribution.id + '"]'),
      $trContributor = $trContribution.next(),
      rowData = $trContribution.closest('table').DataTable().row($trContribution).data(),
      LI2Observer = function ($badge) {
        if ($badge.length === 0) return null;
        var $container = $badge.closest('.LI-profile__container'),
            timeoutId = setTimeout(function () {
              $container.addClass('error')
            }, 3000);
        new ResizeSensor($badge, function() {
          clearTimeout(timeoutId);
          $container.addClass('success');
        });
        initLinkedIn();
      }

  // linkedin profile badge
  if (contributor.previous_changes.linkedin_url) {
    var $container = $trContributor.find('.LI-profile__container');
    $container.removeClass('loaded error')
              .find('.LI-profile-badge').remove();
    if (!contributor.linkedin_url) {
      $container.hide();
    } else {
      $container.show();
      var LIuser = contributor.linkedin_url.match(/in\/((\w|-)+)(\/|$)/) &&
                   contributor.linkedin_url.match(/in\/((\w|-)+)(\/|$)/)[1];
      $.when(
        $container
          .append(
            '<div class="LI-profile-badge" data-version="v1" data-size="medium" data-locale="en_US" data-type="horizontal" data-theme="light" ' +
                  'data-vanity="' + LIuser + '">' +
              '<a class="LI-simple-link" href="' + contributor.linkedin_url + '"?trk=profile-badge"></a>' +
            '</div>'
          )
      ).done(function () {
        var $badge = $container.find('.LI-profile-badge'),
            timeoutId = setTimeout(function () {
              $container.addClass('error')
            }, 3000);
        new ResizeSensor($badge, function() {
          clearTimeout(timeoutId);
          $container.addClass('loaded');
        });
        initLinkedIn();
      })
    }
  }

  // delete data that isn't stored in datatables
  delete contributor.previous_changes;

  // update datatables
  // don't update until the child row is closed, or the re-draw will hose things
  // timeout is necessary because this appears to step on the normal open/close behavior (contributor_child_row.js)
  $trContribution.one('click', 'td.toggle-contributor-child', function (e) {
    setTimeout(function () {
      $('#prospect-contributors-table, #curate-contributors-table').DataTable()
        .row('[data-contribution-id="' + contribution.id + '"]')  // don't use $trContribution here as it won't apply to curate table
        .data(
          Object.assign(
            rowData,
            { contributor: contributor },
            { publish_contributor: contribution.publish_contributor }
          )
        );
    }, 100)

  })

  toggleFormDone($('#contribution-form-' + contribution.id), true);

}());