(() => {
  const {
    story,
    storyErrors,
    s3DirectPostFields,
    storyWasPublished,
    previewStateChanged,
    publishStateChanged,
    promoteEnabled = false,
    newAds = false,
    gadsErrors = false,
    adsWereDestroyed = false
  } = <%= raw @res_data.to_json %>;
  const $table = $('#promoted-stories-table');
  const form = document.getElementById('story-settings-form');
  const hiddenAdInputs = document.querySelector('#story-settings__ads-inputs');
  const hiddenLinkCopyBtn = document.querySelector('.hidden-link__copy');
  const updateStoryCard = (story) => {
    const card = document.querySelector(`.story-card[data-story-id="${story.id}"]`);
    card.dataset.storySlug = story.slug;
    card.querySelector('.story-card__title p').textContent = story.title;
  };
  const updateStoryHeader = () => {
    const container = document.getElementById('edit-story-layout');
    const header = document.querySelector('.story-header__wrapper');
    header.remove();
    container.insertAdjacentHTML('afterbegin', "<%= j render('stories/edit/story_header', { story: @story }) %>");
  };

  // update any story attributes that fall under Settings
  const updateStory = () => {
    const storyIndex = CSP.stories.findIndex(_story => _story.id === story.id);
    const storyObj = CSP.stories[storyIndex];
    //console.log('storyObj before update: ', storyObj)
        
    // this covers both title being changed and product present/absent in the path
    if (storyObj.csp_story_path !== story.csp_story_path) {
      updateStoryCard(story);
      updateStoryHeader();
      storyObj.csp_story_path = story.csp_story_path
    }
    Object.assign(
      storyObj, 
      Object.fromEntries(
        Object.entries(story).filter(([attr, val]) => (
          ['title', 'logo_published', 'preview_published', 'published'].includes(attr)
        ))
      )
    );
    //console.log('storyObj after update: ', storyObj)
  };

  const showFlash = () => {
    const flash = document.querySelector('.story-header__flash');
    
    /**
      *  in the event there are two changes (e.g. logo published and story published),
      *  limit flash to publish state / google ads
      */
    if (publishStateChanged) {
      $table.DataTable().ajax.reload(() => {});
      flash.classList.add('alert', `alert-${gadsErrors ? 'warning' : 'success'}`);
      flash.innerHTML = `
        <ul class="fa-ul">
          <li>
            <strong><i class="fa fa-fw fa-check"></i></strong>&nbsp;&nbsp;
            <p>${publishStateChanged} successfully</p>
          </li>
          <li>
            <strong><i class="fa fa-fw ${gadsErrors ? 'fa-warning' : 'fa-check'}"></i></strong>&nbsp;&nbsp;
            <p>
              ${gadsErrors ?
                `Errors when ${storyWasPublished ? 'creating' : 'removing'} Promoted Story` :
                `Promoted Story ${storyWasPublished ? 'created' : 'removed'} successfully`
              }
            </p>
          </li>
        </ul>
      `.trim();
    } else if (previewStateChanged) {
      flash.classList.add('alert',  'alert-success');
      flash.innerHTML = `
        <ul class="fa-ul">
          <li>
            <strong><i class="fa fa-fw fa-check"></i></strong>&nbsp;&nbsp;
            <p>${previewStateChanged} successfully</p>
          </li>
        </ul>
      `.trim();
    }
    if (publishStateChanged || previewStateChanged) {
      setTimeout(() => {
        flash.classList.remove('alert', 'alert-success', 'alert-info', 'alert-warning', 'alert-danger');
      }, 2500);
    }
  };

  scrollTo(0,0);

  // update the form with new a new s3 upload key
  if (s3DirectPostFields) form.dataset.s3Data = JSON.stringify(s3DirectPostFields);

  // hiddenAdInputs.querySelectorAll('input').forEach(input => input.disabled = true);
  hiddenLinkCopyBtn.setAttribute('title', 'Copy');
  hiddenLinkCopyBtn.classList.remove('disabled');
  $(hiddenLinkCopyBtn).tooltip('fixTitle');
  toggleFormDone($(form), true);
  showFlash();
  updateStory();
  if (newAds) {
    hiddenAdInputs.querySelector('[name*="topic"][name*="[id]"]').value = newAds.topic.id;
    hiddenAdInputs.querySelector('[name*="topic"][name*="[ad_id]"]').value = newAds.topic.ad_id;
    hiddenAdInputs.querySelector('[name*="retarget"][name*="[id]"]').value = newAds.retarget.id;
    hiddenAdInputs.querySelector('[name*="retarget"][name*="[ad_id]"]').value = newAds.retarget.ad_id;
  } else if (adsWereDestroyed) {
    hiddenAdInputs.querySelector('[name*="[id]"]').value = '';
    hiddenAdInputs.querySelector('[name*="[_destroy]"]').checked = false;
  }
})();