(function (window, document) {

  "use strict";

  var jQuery, $; // localize jquery variables

  if (window.jQuery === undefined || isOldVersion(window.jQuery.fn.jquery)) {
    loadScript("https://ajax.googleapis.com/ajax/libs/jquery/1.12.3/jquery.min.js",
      function () {
        /* Restore $ and window.jQuery to their previous values and store the
           new jQuery in our local jQuery variables. */
        $ = jQuery = window.jQuery.noConflict(true);
        main();
      });
  } else {
    $ = jQuery = window.jQuery;
    main();
  }

  function main () {

    $(function () {

      var $widgetStylesheet = $("<link>", {
            rel: "stylesheet",
            type: "text/css",
            href: "<%= URI.join(root_url, asset_path('cs-widget.css')).to_s %>"
          });

      // wait for stylesheet to load ...
      $widgetStylesheet.appendTo('head').on('load', function () {

        $.ajax({
          url: "<%= URI.join(root_url, widget_data_path) %>",
          dataType: 'jsonp',
          data: { tabColor: $('#cs-script').data('tab-color'),
                  fontColor: $('#cs-script').data('font-color'),
                  category: $('#cs-script').data('category'),
                  product: $('#cs-script').data('product') },
          success: function (data) {
            $('#cs-container').html(data.html);
            var $images = $('#cs-container img'), loadedImages = 0;
            // wait for all images to load so dimension calculations are correct ...
            $images.on('load', function (e) {
              if (++loadedImages === $images.length) {
                slideDrawerPlugin();
                preventScrollNav();
                scrollHandlers();
                centerLogos();
                trackVisitor(data.segmentId);
                // if user is using a mouse, this will hose dimensions
                // (in a somewhat random way)
                // compensate for this ...
                if ($('.cs-drawer-content').css('height') !== '141px') {
                  $('.cs-drawer-content').css('height', '141px');
                  $('.cs-drawer-items').css('height', '141px');
                }
                $('#cs-container .cs-drawer').slideDrawer({
                  showDrawer: false, // drawer is hidden on page load
                  slideTimeout: true, // Sets the drawer to slide down after set count if set to true.
                  slideSpeed: 600, // Slide drawer speed.
                  slideTimeoutCount: 3000 // How long to wait before sliding drawer slides down.
                });
                $('#cs-container .cs-drawer').css('visibility', 'visible');
              }
            });
          }
        }); // ajax
      });
    });
  }

  // slideout drawer plugin
  var drawer = {

    init: function (options, div) {

      if (options.showDrawer === true && options.slideTimeout === true) {
        setTimeout(function() {
          drawer.slide(div, options.drawerHiddenHeight, options.slideSpeed);
        }, options.slideTimeoutCount);
      } else if (options.showDrawer === 'slide') {
        // Set drawer hidden with slide effect
        drawer.slide(div, options.drawerHiddenHeight, options.slideSpeed);
      } else if (options.showDrawer === false) {
        // Set drawer to hide
        drawer.hide(options, div);
      }

      $('#cs-container header').on('click', function () {
        drawer.toggle(options, div);
      });
    },

    //Toggle function
    toggle: function (options, div) {
      ($(div).height() + options.borderHeight === options.drawerHeight) ?
        drawer.slide( div, options.drawerHiddenHeight, options.slideSpeed ) :
        drawer.slide( div, options.drawerHeight-options.borderHeight, options.slideSpeed );
    },

    // Slide animation function
    slide: function (div, height, speed) {
      $(div).animate({
        'height': height
      }, speed );
    },

    hide: function (options, div) {
      $(div).css('height', options.drawerHiddenHeight);
    },

  };

  function loadScript (url, callback) {
    var scriptTag = document.createElement('script');
    scriptTag.setAttribute("type", "text/javascript");
    scriptTag.setAttribute("src", url);
    if (typeof callback !== "undefined") {
      if (scriptTag.readyState) {
        /* For old versions of IE */
        scriptTag.onreadystatechange = function () {
          if (this.readyState === 'complete' || this.readyState === 'loaded') {
            callback();
          }
        };
      } else {
        scriptTag.onload = callback;
      }
    }
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(scriptTag);
  }

  // bootstrap requires >= v1.9 of jquery
  function isOldVersion (jqVer) {
    var majorRel = jqVer.split('.')[0],
        minorRel = jqVer.split('.')[1];
    if (majorRel === '1' && parseInt(minorRel, 10) < 9) {
      return true;
    }
    else return false;
  }

  function slideDrawerPlugin () {

    // Function wrapper
    $.fn.slideDrawer = function (options) {

      var $drawerContent = $('#cs-container .cs-drawer-content'),  /* Content height of drawer */
          borderHeight = parseInt($drawerContent.css('border-top-width')); /* Border height of content */

      var drawerHeight = this.height() + borderHeight; /* Total drawer height + border height */
      var drawerContentHeight = $drawerContent.outerHeight() //- borderHeight; /* Total drawer content height minus border top */
      var drawerHiddenHeight = (drawerHeight - drawerContentHeight) - borderHeight; /* How much to hide the drawer, total height minus content height */
      var defaults = {
        showDrawer: 'slide', /* Drawer hidden on load by default, options (true, false, slide) */
        slideSpeed: 700, /* Slide drawer speed 3 secs by default */
        slideTimeout: true, /* Sets time out if set to true showDrawer false will be ignored */
        slideTimeoutCount: 5000, /* How long to wait before sliding drawer */
        drawerContentHeight: drawerContentHeight, /* Div content height no including tab or border */
        drawerHeight: drawerHeight, /* Full div height */
        drawerHiddenHeight: drawerHiddenHeight, /* Height of div when hidden full height minus content height */
        borderHeight: borderHeight /* border height if set in css you cann overwrite but best just leave alone */
      };

      /* Overwrite defaults */
      var pluginOptions = $.extend(defaults, options);

      return this.each(function () {
        drawer.init(pluginOptions, this);
      });
    };
  }

  function centerLogos () {
    $('#cs-container img').each(function (image) {
      var height = $(this).outerHeight(),
          maxHeight = parseInt($(this).css('max-height')),
          diff = maxHeight - height;
      if (diff) {
        $(this).css('margin-top', diff / 2);
        $(this).css('margin-bottom', diff / 2);
      }
    });
  }

  /*
    when scrolling past boundaries with trackpad, prevent default browser behavior
    (back/forward navigation)
  */
  function preventScrollNav () {
    var maxX = null;
    $(document).on('wheel', '.row-horizon', function (event) {
      maxX = $(this).prop('scrollWidth') - $(this).prop('offsetWidth');
      // If this event looks like it will scroll beyond the bounds of the element,
      //  prevent it and set the scroll to the boundary manually
      if ($(this).prop('scrollLeft') + event.originalEvent.deltaX < 0 ||
          $(this).prop('scrollLeft') + event.originalEvent.deltaX > maxX) {
        event.preventDefault();
        $(this).prop('scrollLeft', Math.max(0, Math.min(maxX, $(this).prop('scrollLeft') + event.originalEvent.deltaX)));
      }
    });
  }

  function scrollHandlers () {

    var $carousel = $('.row-horizon'),
        $paginationContainer = $('.cs-pagination-row'),
        scrollWidth = $carousel.prop('scrollWidth'),
        maxScrollPosition = scrollWidth - $carousel.width(),
        numPages = Math.ceil(scrollWidth / $carousel.width()),
        pageWidth = Math.ceil(scrollWidth / numPages),
        currentPage = 1,
        scrollPosition = null, scrollRemaining = null,
        dynamicPage = null, lastPage = null,
        paginationTrackScroll = function () {
          dynamicPage =
            calculateDynamicPage($(this).scrollLeft(), numPages, pageWidth, $(this).width());
          if (dynamicPage !== currentPage) {
            lastPage = currentPage;
            currentPage = dynamicPage;
            $paginationContainer.find('div:nth-of-type(' + lastPage.toString() + ')')
                                .removeClass('cs-current-page-dot');
            $paginationContainer.find('div:nth-of-type(' + currentPage.toString() + ')')
                                .addClass('cs-current-page-dot');
          }
        };

    // set up pagination
    for (var i = 0; i < numPages; i++) {
      if (i === 0) {
        $paginationContainer
          .append("<div class='cs-page-dot cs-current-page-dot'></div>")
      } else {
        $paginationContainer
          .append("<div class='cs-page-dot'></div>")
      }
    }

    $carousel.on('scroll', paginationTrackScroll);

    $('.cs-scroll-left')
      .on('click', arrowScrollLeft($carousel, pageWidth));

    $('.cs-scroll-right')
      .on('click', arrowScrollRight($carousel, pageWidth, scrollWidth));

    $('.cs-page-dot')
      .on('click', paginationScroll($carousel, pageWidth, paginationTrackScroll));
  }

  function arrowScrollRight ($carousel, pageWidth, scrollWidth) {
    return function (e) {
      var scrollPosition = $carousel.scrollLeft(),
          scrollRemaining = scrollWidth - (scrollPosition + $carousel.width());
      $('.cs-page-dot').off('click', paginationScroll);
      if (scrollRemaining >= pageWidth) {
        $carousel.animate({ scrollLeft: '+=' + pageWidth.toString() }, 1000,
          function () { $('.cs-page-dot').on('click', paginationScroll); })
      } else {
        $carousel.animate({ scrollLeft: '+=' + scrollRemaining.toString() }, 1000,
          function () { $('.cs-page-dot').on('click', paginationScroll); })
      }
    }
  }

  function arrowScrollLeft ($carousel, pageWidth) {
    return function (e) {
      var scrollPosition = $carousel.scrollLeft();
      $('.cs-page-dot').off('click', paginationScroll);
      if (scrollPosition >= pageWidth) {
        $carousel.animate({ scrollLeft: '-=' + pageWidth.toString() }, 1000,
          function () { $('.cs-page-dot').on('click', paginationScroll); })
      }
      else {
        $carousel.animate({ scrollLeft: '-=' + scrollPosition.toString() }, 1000,
          function () { $('.cs-page-dot').on('click', paginationScroll); })
      }
    }
  }

  function paginationScroll ($carousel, pageWidth, paginationTrackScroll) {
    // $(this) refers to the div.page-dot clicked
    return function (e) {
      var goToPage = null, scrollTo = null;

      if ($(this).hasClass('cs-current-page-dot')) { e.preventDefault(); }

      // turn off other handlers until animation is complete
      $carousel.off('scroll', paginationTrackScroll);
      // .. but not the currently executing handler ... things get weird
      // $('.cs-page-dot').off('click', paginationScroll)

      $(this).addClass('goto-page-dot');
      $('.cs-current-page-dot').removeClass('cs-current-page-dot')
      $('.cs-page-dot').each(function (index, pageDot) {
        if ($(this).hasClass('goto-page-dot')) {
          scrollTo = index * pageWidth;
          $(this).addClass('cs-current-page-dot')
                 .removeClass('goto-page-dot')
          return false;
        }
      });
      $carousel.animate({ scrollLeft: scrollTo }, 1000, function () {
        $carousel.on('scroll', paginationTrackScroll);
      });
    }
  }

  function calculateDynamicPage (position, numPages, pageWidth, carouselWidth) {
    for (var i = 1; i <= numPages; i++) {
      if (position + (carouselWidth / 2) < pageWidth * i) { return i }
    }
  }

  function trackVisitor (segmentId) {
    if (!segmentId) { return false; }
    if (typeof __adroll === undefined) {
      var trackingHost = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
      $.getScript(trackingHost + '/j/roundtrip.js', function () {
        try {
          __adroll.record_user({"adroll_segments": segmentId})
        } catch(err) {}
      });
    } else {
      try {
        __adroll.record_user({"adroll_segments": segmentId})
      } catch(err) {}
    }
  }

}(window, document));