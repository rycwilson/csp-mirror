(function (window, document) {
  "use strict";
  var jQuery, $; // localize jquery variables

  if (window.jQuery === undefined || isOldVersion(window.jQuery.fn.jquery)) {
    loadScript("https://ajax.googleapis.com/ajax/libs/jquery/1.12.3/jquery.min.js",
      function () {
        /* Restore $ and window.jQuery to their previous values and store the
           new jQuery in our local jQuery variables. */
        $ = jQuery = window.jQuery.noConflict(true);
        main();
      });
  } else {
    $ = jQuery = window.jQuery;
    main();
  }

  function main () {

    $(function () {

      var category = $('#cs-script').data('category'),
          product = $('#cs-script').data('product'),
          position = $('#cs-script').data('position'),
          $widgetStylesheet = $("<link>", {
            rel: "stylesheet",
            type: "text/css"
          });

      if (position === 'relative') {
        $widgetStylesheet.attr('href',
          "<%= URI.join(root_url, asset_path('cs-widget-relative.css')).to_s %>"
        );
      } else if (position === 'fixed' {
        $widgetStylesheet.attr('href',
          "<%= URI.join(root_url, asset_path('cs-widget-fixed.css')).to_s %>"
        );
      } else if (position === 'both') {
        $widgetStylesheet.attr('href',
          "<%= URI.join(root_url, asset_path('cs-widget-both.css')).to_s %>"
        );
      } else {
        $widgetStylesheet.attr('href',
          "<%= URI.join(root_url, asset_path('cs-widget-fixed.css')).to_s %>"
        );
      }

      // get font awesome if it doesn't exist on host
      if ($('link[href*="font-awesome"]').length === 0) {
        $("<link>", {
          rel: "stylesheet",
          type: "text/css",
          href: "https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
        }).appendTo('head');
      }

      // wait for stylesheet to load ...
      $widgetStylesheet.appendTo('head').on('load', function () {

        $.ajax({
          url: "<%= URI.join(root_url, widget_data_path) %>",
          dataType: 'jsonp',
          data: {
            category: category,
            product: product,
            position: position
          },
          success: function (data) {
            $('#cs-container').html(data.html);
            // wait for all images to load so dimension calculations are correct ...
            var $images = $('#cs-container img'), loadedImages = 0;
            $images.on('load', function (e) {
              if (++loadedImages === $images.length) {
                if (format === 'inline') {
                  buildWidgetInline();
                } else {
                  buildWidget();
                }
              }
            })
          }
        }); // ajax

      });
    });
  }

  function buildWidgetInline () {
    xScrollBoundaries()
    scrollHandlers();
    $('.cs-thumbnail.published').hover(
      function () { $(this).css('border-color', '<%= @company.widget.tab_color %>'); },
      function () { $(this).css('border-color', '#ddd'); }
    );
    $('.cs-thumbnail.logo-published').hover(
      function () { $(this).css('border-color', '#ccc'); },
      function () { $(this).css('border-color', '#ddd'); }
    );
    $('.cs-customer-stories').css('visibility', 'visible');
    trackVisitor();
  }

  function buildWidget () {
    slideDrawerPlugin();
    xScrollBoundaries()
    scrollHandlers();

    var widgetShowTimer = null, widgetHideTimer = null;
    // cancel the timers if user interacts with widget
    $('.cs-header').on('click', function (e, data) {
      var auto = data && data.isAuto;
      if (!auto) {
        if (widgetShowTimer) { clearTimeout(widgetShowTimer); }
        if (widgetHideTimer) { clearTimeout(widgetHideTimer); }
      }
    });
    // if user is using a mouse, this will hose dimensions
    // (in a somewhat random way)
    // compensate for this ...
    // if ($('.cs-drawer-content').css('height') !== '141px') {
    //   $('.cs-drawer-content').css('height', '141px');
    //   $('.cs-drawer-items').css('height', '141px');
    // }
    if ( <%= @company.widget.show %> && !getCookie('cs-widget-hide') ) {
      widgetShowTimer = setTimeout(function () {
        $('.cs-header').trigger('click', { isAuto: true } );
        if (<%= @company.widget.hide %>) {
          widgetHideTimer = setTimeout(function () {
            $('.cs-header').trigger('click', { isAuto: true } );
          }, <%= @company.widget.hide_delay %>);
        }
      }, <%= @company.widget.show_delay %>);
      var date = new Date();
      date.setDate(date.getDate() + <%= @company.widget.show_freq %>);
      setCookie('cs-widget-hide', '1', date.toUTCString())
    }
    $('.cs-thumbnail.published').hover(
      function () { $(this).css('border-color', '<%= @company.widget.tab_color %>'); },
      function () { $(this).css('border-color', 'rgba(0, 0, 0, 0.7)'); }
    );
    $('.cs-thumbnail.logo-published').hover(
      function () { $(this).css('border-color', '#ccc'); },
      function () { $(this).css('border-color', 'rgba(0, 0, 0, 0.7)'); }
    );
    $('.cs-drawer')
      .slideDrawer()
      .css({ opacity: 0, visibility: "visible" })
      .animate({ opacity: 1 }, 200);
    trackVisitor();
  }

  // slideout drawer plugin
  function loadScript (url, callback) {
    var scriptTag = document.createElement('script');
    scriptTag.setAttribute("type", "text/javascript");
    scriptTag.setAttribute("src", url);
    if (typeof callback !== "undefined") {
      if (scriptTag.readyState) {
        /* For old versions of IE */
        scriptTag.onreadystatechange = function () {
          if (this.readyState === 'complete' || this.readyState === 'loaded') {
            callback();
          }
        };
      } else {
        scriptTag.onload = callback;
      }
    }
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(scriptTag);
  }

  // bootstrap requires >= v1.9 of jquery
  function isOldVersion (jqVer) {
    var majorRel = jqVer.split('.')[0],
        minorRel = jqVer.split('.')[1];
    if (majorRel === '1' && parseInt(minorRel, 10) < 9) {
      return true;
    } else {
      return false;
    }
  }

  // there are two headers: visible-xs-block and hidden-xs
  // for auto-show behavior, the click event will be triggered on
  // all headers, including the hidden ones.
  // below two functions ensure only one toggle happens
  function isXsWidgetAndScreen($clickTarget) {
    var parent = $clickTarget.parent(),
        screenWidth = parseInt($clickTarget.closest('.cs-row').css('width'), 10);
    if (screenWidth <= 767 && parent.hasClass('visible-xs-block')) {
      return true;
    } else {
      return false;
    }
  }

  function isSmWidgetAndScreen($clickTarget) {
    var parent = $clickTarget.parent(),
        screenWidth = parseInt($clickTarget.closest('.cs-row').css('width'), 10);
    if (screenWidth > 767 && parent.hasClass('hidden-xs')) {
      return true;
    } else {
      return false;
    }
  }

  function slideDrawerPlugin () {

    var drawer = {

      init: function (options, div) {

        if (options.showDrawer === true && options.slideTimeout === true) {
          setTimeout(function() {
            drawer.slide(div, options.drawerHiddenHeight, options.slideSpeed);
          }, options.slideTimeoutCount);
        } else if (options.showDrawer === 'slide') {
          // Set drawer hidden with slide effect
          drawer.slide(div, options.drawerHiddenHeight, options.slideSpeed);
        } else if (options.showDrawer === false) {
          // Set drawer to hide
          drawer.hide(options, div);
        }

        $('.cs-header').on('click', function () {
          if ( isXsWidgetAndScreen($(this)) ) {
            drawer.toggle(options, div);
          } else if ( isSmWidgetAndScreen($(this)) ) {
            drawer.toggle(options, div);
          }
        });

      },

      //Toggle function
      toggle: function (options, div) {
        ($(div).height() + options.borderHeight === options.drawerHeight) ?
          drawer.slide( div, options.drawerHiddenHeight, options.slideSpeed ) :
          drawer.slide( div, options.drawerHeight-options.borderHeight, options.slideSpeed );
      },

      // Slide animation function
      slide: function (div, height, speed) {
        $(div).animate({ 'height': height }, speed, 'swing', function () {
          $('.cs-header i[class*="fa-chevron"]').toggle();
        });
      },

      hide: function (options, div) {
        $(div).css('height', options.drawerHiddenHeight);
      },

    };
    // Function wrapper
    $.fn.slideDrawer = function (options) {

      var $drawerContent = $('#cs-container .cs-drawer-content'),  /* Content height of drawer */
          borderHeight = parseInt($drawerContent.css('border-top-width')); /* Border height of content */

      var drawerHeight = this.height() + borderHeight; /* Total drawer height + border height */
      var drawerContentHeight = $drawerContent.outerHeight() //- borderHeight; /* Total drawer content height minus border top */
      var drawerHiddenHeight = (drawerHeight - drawerContentHeight) - borderHeight; /* How much to hide the drawer, total height minus content height */
      var defaults = {
        showDrawer: 'slide', /* Drawer hidden on load by default, options (true, false, slide) */
        slideSpeed: 700, /* Slide drawer speed 3 secs by default */
        slideTimeout: true, /* Sets time out if set to true showDrawer false will be ignored */
        slideTimeoutCount: 5000, /* How long to wait before sliding drawer */
        drawerContentHeight: drawerContentHeight, /* Div content height no including tab or border */
        drawerHeight: drawerHeight, /* Full div height */
        drawerHiddenHeight: drawerHiddenHeight, /* Height of div when hidden full height minus content height */
        borderHeight: borderHeight /* border height if set in css you cann overwrite but best just leave alone */
      };

      /* Overwrite defaults */
      var pluginOptions = $.extend(defaults, options);

      return this.each(function () {
        drawer.init(pluginOptions, this);
      });
    };

  }

  /*
    when scrolling past boundaries with trackpad, prevent default browser behavior
    (back/forward navigation)
  */
  function xScrollBoundaries () {
    var maxX = null;
    $(document).on('wheel', '.row-horizon', function (event) {
      maxX = $(this).prop('scrollWidth') - $(this).prop('offsetWidth');
      // If this event looks like it will scroll beyond the bounds of the element,
      //  prevent it and set the scroll to the boundary manually
      if ($(this).prop('scrollLeft') + event.originalEvent.deltaX < 0 ||
          $(this).prop('scrollLeft') + event.originalEvent.deltaX > maxX) {
        event.preventDefault();
        $(this).prop('scrollLeft', Math.max(0, Math.min(maxX, $(this).prop('scrollLeft') + event.originalEvent.deltaX)));
      }
    });
  }

  function scrollHandlers () {

    var $carousel = $('.row-horizon'),
        $paginationContainer = $('.cs-pagination-row'),
        scrollWidth = $carousel.prop('scrollWidth'),
        maxScrollPosition = scrollWidth - $carousel.width(),
        numPages = Math.ceil(scrollWidth / $carousel.width()),
        pageWidth = Math.ceil(scrollWidth / numPages),
        currentPage = 1,
        scrollPosition = null, scrollRemaining = null,
        dynamicPage = null, lastPage = null,
        calculateDynamicPage = function (position, numPages, pageWidth, carouselWidth) {
          for (var i = 1; i <= numPages; i++) {
            if (position + (carouselWidth / 2) < pageWidth * i) { return i; }
          }
        },
        paginationTrackScroll = function () {
          dynamicPage =
            calculateDynamicPage($(this).scrollLeft(), numPages, pageWidth, $(this).width());
          if (dynamicPage !== currentPage) {
            lastPage = currentPage;
            currentPage = dynamicPage;
            $paginationContainer.find('div:nth-of-type(' + lastPage.toString() + ')')
                                .removeClass('cs-current-page-dot');
            $paginationContainer.find('div:nth-of-type(' + currentPage.toString() + ')')
                                .addClass('cs-current-page-dot');
          }
        },
        paginationScroll = function ($carousel, pageWidth, paginationTrackScroll) {
          // $(this) refers to the div.page-dot clicked
          return function (e) {
            var goToPage = null, scrollTo = null;

            if ($(this).hasClass('cs-current-page-dot')) { e.preventDefault(); }

            // turn off other handlers until animation is complete
            $carousel.off('scroll', paginationTrackScroll);
            // .. but not the currently executing handler ... things get weird
            // $('.cs-page-dot').off('click', paginationScroll)

            $(this).addClass('goto-page-dot');
            $('.cs-current-page-dot').removeClass('cs-current-page-dot');
            $('.cs-page-dot').each(function (index, pageDot) {
              if ($(this).hasClass('goto-page-dot')) {
                scrollTo = index * pageWidth;
                $(this).addClass('cs-current-page-dot')
                       .removeClass('goto-page-dot');
                return false;
              }
            });
            $carousel.animate({ scrollLeft: scrollTo }, 1000, function () {
              $carousel.on('scroll', paginationTrackScroll);
            });
          };
        },
        arrowScrollLeft = function ($carousel, pageWidth) {
          return function (e) {
            var scrollPosition = $carousel.scrollLeft();
            $('.cs-page-dot').off('click', paginationScroll);
            if (scrollPosition >= pageWidth) {
              $carousel.animate({ scrollLeft: '-=' + pageWidth.toString() }, 1000,
                function () { $('.cs-page-dot').on('click', paginationScroll); });
            }
            else {
              $carousel.animate({ scrollLeft: '-=' + scrollPosition.toString() }, 1000,
                function () { $('.cs-page-dot').on('click', paginationScroll); });
            }
          };
        },
        arrowScrollRight = function ($carousel, pageWidth, scrollWidth) {
          return function (e) {
            var scrollPosition = $carousel.scrollLeft(),
                scrollRemaining = scrollWidth - (scrollPosition + $carousel.width());
            $('.cs-page-dot').off('click', paginationScroll);
            if (scrollRemaining >= pageWidth) {
              $carousel.animate({ scrollLeft: '+=' + pageWidth.toString() }, 1000,
                function () { $('.cs-page-dot').on('click', paginationScroll); });
            } else {
              $carousel.animate({ scrollLeft: '+=' + scrollRemaining.toString() }, 1000,
                function () { $('.cs-page-dot').on('click', paginationScroll); });
            }
          };
        };

    // set up pagination
    for (var i = 0; i < numPages; i++) {
      if (i === 0) {
        $paginationContainer
          .append("<div class='cs-page-dot cs-current-page-dot'></div>");
      } else {
        $paginationContainer
          .append("<div class='cs-page-dot'></div>");
      }
    }

    if (numPages > 1) {

      $carousel.on('scroll', paginationTrackScroll);
      $('.cs-scroll-left')
        .on('click', arrowScrollLeft($carousel, pageWidth));
      $('.cs-scroll-right')
        .on('click', arrowScrollRight($carousel, pageWidth, scrollWidth));
      $('.cs-page-dot')
        .on('click', paginationScroll($carousel, pageWidth, paginationTrackScroll));

    } else {
      $('.cs-pagination-row, .cs-scroll-left, .cs-scroll-right')
        .css('visibility', 'hidden');
    }
  }

  function trackVisitor () {

    $('#cs-container').append(
      '<iframe class="cs-iframe" height="0" width="0" style="display:none" ' +
      'src="https://' + '<%= @company.subdomain %>' + '.customerstories.net/track_widget"></iframe>');

    // var trackingDoc = $('#cs-container').find('iframe')[0].contentWindow.document,
    //     trackingHost = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com"),
    //     trackingUrl = trackingHost + '/j/roundtrip.js';

    // trackingDoc.open();
    // trackingDoc.write("<html><head><script>adroll_adv_id='" + advId + "';adroll_pix_id='" + pixId + "';</script><script src='" + trackingUrl + "'></script><script>setTimeout(function(){try{__adroll.record_user({'adroll_segments':'" + segmentId + "'})}catch(err){};},1000);</script></head></html>");
    // trackingDoc.close();
  }

  function setCookie (name, value, expires, path, domain, secure) {
    document.cookie = name + "=" + escape(value) +
      ((expires) ? "; expires=" + expires : "") +
      ((path) ? "; path=" + path : "") +
      ((domain) ? "; domain=" + domain : "") +
      ((secure) ? "; secure" : "");
  }

  function getCookie (name) {
    var cookie = " " + document.cookie;
    var search = " " + name + "=";
    var setStr = null;
    var offset = 0;
    var end = 0;
    if (cookie.length > 0) {
      offset = cookie.indexOf(search);
      if (offset != -1) {
        offset += search.length;
        end = cookie.indexOf(";", offset)
        if (end == -1) {
          end = cookie.length;
        }
        setStr = unescape(cookie.substring(offset, end));
      }
    }
    return(setStr);
  }

}(window, document));