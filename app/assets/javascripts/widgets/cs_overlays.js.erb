
//= require modernizr/widget_modernizr
//= require js/classie
//= require plugins/grid_overlays

function cspInitOverlays ($, $container, subdomain, isDemo) {

  var loading = function ($storyCard) {
          $storyCard.addClass('cs-loading');
          $container.find('a').css('pointer-events', 'none');
          setTimeout(function () {
            if (!$storyCard.hasClass('cs-loaded')) {
              $storyCard.addClass('cs-still-loading');
            }
          }, 1000);
        },
      applyScrollBoundaries = function () {
          var maxY, startY = 0;
          $container
            .find('.scroll-wrap').on('touchstart', function (event) {
                startY = event.originalEvent.touches[0].pageY;
              })
              .end()
            .find('.scroll-wrap').on('touchmove', function (event) {
              var offsetY;
              maxY = $(this).prop('scrollHeight') - $(this).prop('offsetHeight');
              offsetY = startY - event.originalEvent.touches[0].pageY;
              // prevent scroll if it's going past the boundary
              if ($(this).prop('scrollTop') + offsetY < 0 || $(this).prop('scrollTop') + offsetY > maxY) {
                event.preventDefault();
                $(this).prop('scrollTop', Math.max(0, Math.min(maxY, $(this).prop('scrollTop') + offsetY)));
              }
            });
          };

  applyScrollBoundaries();

  $container.on('click', 'a.published, a.preview-published', function (e) {
    e.preventDefault();
    var $story, $storyCard = $(this);
    if ($storyCard.hasClass('cs-loaded')) {
      return false;  // overlays handler
    } else {
      loading($storyCard);
      $.ajax({
        url: $storyCard.attr('href'),
        method: 'GET',
        data: {
          is_widget: true,
          window_width: window.innerWidth
        },
        dataType: 'jsonp'
      })
        .done(function (data, status, jqxhr) {
          var storyIndex = $container.is('#cs-gallery') ? $storyCard.index() + 1 : $storyCard.parent().index() + 1;
          $story = $container.find('.content__item:nth-of-type(' + storyIndex + ')');
          trackStoryVisitor($storyCard);
          $.when(
            $story.html(data.html),
            $storyCard.removeClass('cs-still-loading').addClass('cs-loaded')
          )
            .then(function () { linkedinListener($story); })
            .then(function () {
              if ($storyCard.hasClass('has-video')) {
                cspInitVideo($, $story);
              }
              initLinkedIn();

              // avoid double-tap behavior
              $container.on('click touchend', '.cs-close-xs', function () {
                // there are multiple close buttons in the story header; don't trigger them all
                $('.content__item--show .cs-close').first().trigger('click');
              });

              $container.on('click', '.linkedin-widget', function () {
                window.open($(this).data('linkedin-url'), '_blank');
              });

              // the grid_overlays.js listener is vanilla js, won't pick up on $storyCard.trigger('click')
              $storyCard[0].click();
            });
        })
        .fail(function () {

        });
    }

  });

  function trackStoryVisitor ($storyCard) {
    if (<%= ENV['HOST_NAME'] == 'customerstories.net' %> && !isDemo) {
      $storyCard.append(
        '<iframe class="cs-iframe" height="0" width="0" style="display:none" ' +
          'src="' + $storyCard.attr('href') + '?track=1"' +
        '></iframe>'
      );
    }
  }

  function initLinkedIn () {
    if (typeof(IN) !== 'object') {
      // console.log('IN not defined')
      $.ajax({
        url: 'https://platform.linkedin.com/in.js',
        method: 'get',
        dataType: 'script',
        timeout: 5000
      })
        .done(function () {
          // console.log('IN loaded')
        })
        .fail(function () {
          // console.log('in.js timed out');
        });
    } else {
      // console.log('IN already defined');
      IN.parse();
    }
  }

  function linkedinListener ($story) {
    var $contributors = $story.find('.story-contributors'),
        $widgets = $contributors.find('.linkedin-widget'),
        firstWidgetLoaded = false,
        firstWidgetIndex = null, currentWidgetIndex = null, relativeWidgetIndex = null,
        numLoadedWidgets = 0,
        widgetTimeoutId, widgetTimeoutDelay = 10000,
        setWidgetTimeout = function (delay, handler) {
          widgetTimeoutId = setTimeout(function () {
            window.removeEventListener('message', handler, false);
            $contributors.remove();
          }, delay);
        },
        // profiles that linkedin can't find will still load, need to detect and remove them
        removeIfNotFound = function ($widget) {
          var $iframe = $widget.find('iframe');
          $iframe.one('load', function () {
            var $iframe = $(this);
            setTimeout(function () {
// console.log('iframe width', $iframe.width());
// console.log('script data-width', $iframe.closest('.linkedin-widget').find('script[type*="MemberProfile"]').data('width'));
              if ($iframe.width() !== $iframe.closest('.linkedin-widget')
                                             .find('script[type*="MemberProfile"]').data('width')) {
                $iframe.remove();
              }
            }, 3000);  // the iframes are not fully rendered until some time after the load event
          });
        },
        postMessageHandler = function (event) {
          // For Chrome, the origin property is in the event.originalEvent object.
          var $widget, origin = event.origin || event.originalEvent.origin;
// console.log(event.data);
          if (event.origin.includes('linkedin') &&
              event.data.includes('-ready') &&
              firstWidgetIndex === null) {
            firstWidgetIndex = parseInt(event.data.match(/\w+_(\d+)-ready/)[1], 10);
// console.log('first', firstWidgetIndex);
          } else if (event.origin.includes('linkedin') && event.data.includes('widgetReady')) {
            if (!firstWidgetLoaded) firstWidgetLoaded = true;
            numLoadedWidgets++;
            currentWidgetIndex = parseInt(event.data.match(/\w+_(\d+)\s/)[1], 10);
            relativeWidgetIndex = currentWidgetIndex - firstWidgetIndex;
            $widget = $widgets.eq(relativeWidgetIndex);

            removeIfNotFound($widget);

// console.log('a widget is ready');
// console.log('it is, ', $widget[0]);
// console.log('current', currentWidgetIndex);
// console.log('relative', relativeWidgetIndex);

            if ((numLoadedWidgets === $widgets.length) && $widgets.length !== 1)  {
              clearTimeout(widgetTimeoutId);
              $contributors.css('visibility', 'visible');
            } else if ($widgets.length === 1) {
              $contributors.remove();
            }
          }
        };
    setWidgetTimeout(widgetTimeoutDelay, postMessageHandler);
    window.addEventListener("message", postMessageHandler, false);
    $(document).one('click', '.cs-content.content--show .close-button', function () {
      window.removeEventListener('message', postMessageHandler, false);
    });
  }

}