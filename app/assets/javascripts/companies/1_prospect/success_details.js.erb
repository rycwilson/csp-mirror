
function successDetailsListeners () {

  var defaultViewHeight = "200px",  // win story expand / collapse
      summernoteToolbarHeight = 41.3,
      summernoteResizebarHeight = 8,
      winStoryLabelHeight = 23,
      customer,
      customButtonHelpPopoverContent = "You can insert contributions in their original form or with a placeholder. The latter is useful for organizing your document while in Edit mode, but will preclude any changes to the underlying content. Toggle to the View mode to see the populated/saved content.",
      winStory, winStoryText, winStoryCompleted,
      winStoryRecipientsSelectOptions,
      contributionsData,  // data returned when the child row is opened; includes invitation templates, questions and answers
      customerPath = function (customerId) { return '/customers/' + customerId; },
      successPath = function (successId) { return '/successes/' + successId; },
      contributionsDataPath = function (successId) { return '/successes/' + successId + '/contributions'; },
      expandedViewHeight = function ($tr, editorIsOpen) {
        // factor in height of the summernote toolbar
        return window.innerHeight - ((editorIsOpen ? summernoteToolbarHeight : 0) + $tr.height() + $tr.next().height() - $('#win-story-editor').height());
      },
      individualContributionTemplate = function (contributionId, contributionsData, $placeholder) {
        return _.template($('#individual-contribution-template').html())({
          placeholder: $placeholder ? _.escape($placeholder.wrap('<p/>').parent().html()) : null,
          contributionId: contributionId,
          contributor: getContributor(contributionId),
          theQandA: contributionsData.answers.filter(function (a) {
                      return a.contribution_id == contributionId;
                    })
                      .map(function (a) {
                        return {
                          question: contributionsData.questions.find(function (q) {
                                      return q.id === a.contributor_question_id;
                                    }).question,
                          answer: a.answer
                        };
                      })
        });
      },
      groupContributionTemplate = function (questionId, contributionsData, $placeholder) {
        return _.template($('#group-contribution-template').html())({
          placeholder: $placeholder ? _.escape($placeholder.wrap('<p/>').parent().html()) : null,
          question: contributionsData.questions.filter(function (q) {
                      return q.id == questionId;
                    })[0],
          answers: contributionsData.answers.filter(function (a) {
                     return a.contributor_question_id == questionId;
                   })
                     .map(function (a) {
                       return {
                         answer: a.answer,
                         contributor: getContributor(a.contribution_id)
                       }
                     })
        });
      },
      noteInsertionDropdownTemplate = function (customerId, contributionsData, type) {
        return _.template($('#note-insertion-dropdown-template').html())({
                  customerId: customerId,
                  contributionsData: contributionsData,
                  type: type
                });
      },
      noteInsertionDropdown = function (customerId, contributionsData, type) {
        return function (context) {
          var ui = $.summernote.ui,
              button = ui.buttonGroup([
                ui.button({
                  className: 'btn btn-default dropdown-toggle\xa0' + type,
                  data: {
                    toggle: 'dropdown',
                    placement: 'top'
                  },
                  contents: (type === 'contributions' ? 'Contributions\xa0\xa0' : 'Placeholders\xa0\xa0') + '<span class="caret"></span>',
                  // tooltip: 'Insert a data placeholder'
                }),
                ui.dropdown({
                  className: 'summernote-custom dropdown-menu-right\xa0' + type,
                  contents: noteInsertionDropdownTemplate(customerId, contributionsData, type),
                  callback: function ($dropdown) {
                    $dropdown.find('li').each(function () {
                      $(this).on('click', function () {
                        var pasteHtml,
                            isContributionsDropdown = $dropdown.hasClass('contributions'),
                            isPlaceholdersDropdown = $(this).data('placeholder');
                        if (isContributionsDropdown && $(this).data('contribution-id')) {
                          pasteHtml = individualContributionTemplate(
                                        $(this).data('contribution-id'),
                                        contributionsData,
                                        null
                                      );
                        } else if (isContributionsDropdown && $(this).data('question-id')) {
                          pasteHtml = groupContributionTemplate(
                                        $(this).data('question-id'),
                                        contributionsData,
                                        null
                                      );
                        } else if (isPlaceholdersDropdown) {
                          pasteHtml = $(this).data('placeholder');
                        }
                        // console.log('pasteHtml', pasteHtml)
                        context.invoke('editor.restoreRange');   // restore cursor position
                        context.invoke('editor.pasteHTML', pasteHtml)
                        context.invoke('editor.saveRange');  // save cursor position
                      });
                    });
                  }
                })
              ]);
          return button.render();   // return button as jquery object
        }
      },
      initWinStoryEditor = function ($tr, height, callback) {
        // console.log('initWinStoryEditor() height', height)
        // use contenteditable instead of textarea because html can't be renderd in textarea
        $('#win-story-editor')
          .prop('contenteditable', true)
          .summernote({
            height: height,// expandedViewHeight($tr, true),
            // dialogsInBody: true,
            focus: true,
            toolbar: [
              ['font', ['bold', 'italic', 'underline']], //, 'clear']],
              ['para', ['ul', 'ol', 'paragraph']],
              ['customButton', ['contributionsDropdown', 'placeholdersDropdown']],
              // code editor is handy in development
              ['view', <%= ENV['HOST_NAME'] != 'customerstories.net' ? ['codeview'] : [] %>],
            ],
            buttons: {
              contributionsDropdown: noteInsertionDropdown($tr.data('customer-id'), contributionsData, 'contributions'),
              placeholdersDropdown: noteInsertionDropdown($tr.data('customer-id'), contributionsData, 'placeholders')
            },
            callbacks: {
              // without this, insertion of a new line doesn't trigger input; critical for inserting placeholders
              onInit: function (summernote) {
                // console.log('summernote', summernote)
                // unable to set this via stylesheets due to dynamic handling by summernote
                $('.note-editor .dropdown-menu.summernote-custom').css({
                  'max-height': 0.95 * $('.note-editable').last().outerHeight() + 'px',
                  'max-width': 0.9 * $('.note-editable').last().outerWidth() + 'px'
                });
                summernote.editable.on('click', function (e) {
                  summernote.note.summernote('saveRange');
                })
                callback();
              },
              onEnter: function (e) {
                // $(this).summernote('pasteHTML', '<br><br>');
                // e.preventDefault();
              },
              onFocus: function (e) {
              },
              onPaste: function () {
              },
              onChange: function (content) {
                // console.log(content)
                var $form = $('form[id*="success-form"]'),
                    $win_story_html = $('input[type="hidden"][name="success[win_story_html]"]'),
                    $win_story_text = $('input[type="hidden"][name="success[win_story_text]"]'),
                    $win_story_markdown = $('input[type="hidden"][name="success[win_story_markdown]"]'),

          // for the text conversion step, insert newlines between paragraphs (summernote shortcoming)
          // for the markdown conversion step (happens in server), clean whitespace and newlines from html
                    textContent = $(content.replace(/<\/p><p>/g, "</p>\r\n<p>"))
                                    .wrapAll('<div class="wrapper"></div>').parent().text();
                    markdownContent = $(content)
                                    .wrapAll('<div class="wrapper"></div>').parent().htmlClean().html();
                $win_story_html.val(content);
                $win_story_text.val(textContent);
                $win_story_markdown.val(markdownContent);
                $form.find('button[type="submit"]').prop('disabled', false);
              }
            }
          });
      },
      initWinStoryEmailEditor = function () {
        $('#win-story-email-editor')
          .summernote({
            // focus: true,
            toolbar: [
              ['font', ['bold', 'italic', 'underline']], //, 'clear']],
              ['para', ['ul', 'ol', 'paragraph']],
            ],
            callbacks: {
              onInit: function (summernote) {
              },
              onChange: function (content) {
                // what to do with changes??
                // $('form[id*="success-form"]')
                //   .find('button[type="submit"]').prop('disabled', false);
                // $('input[type="hidden"][name="success[win_story_html]"]')
                //   // .val(JSON.stringify(content));
                //   .val(content);
              }
            }
          });
      }
      getContributor = function (contributionId) {
        return $('#prospect-contributors-table')
                  .DataTable()
                  .rows('[data-contribution-id="' + contributionId + '"]')
                  .data()[0]
                  .contributor;
      },
      populatePlaceholders = function (html) {
        var $wrapper = $($('input[type="hidden"][name="success[win_story_html]"]').val())
                         .wrapAll('<div class="wrapper"></div>')
                         .parent(),
            dtContributors = $('#prospect-contributors-table').DataTable();

        // customer logo
        $wrapper.find('.placeholder.customer-logo').each(function () {
          var $placeholder = $(this);
          $placeholder.replaceWith(
            _.template($('#win-story-customer-logo-template').html())({
              customer: customer,
              placeholder: _.escape($placeholder.wrap('<p/>').parent().html()),
              className: $placeholder.attr('class').replace('placeholder', '')
            })
          );
        });

        // customer description
        $wrapper.find('.placeholder.customer-description').each(function () {
          var $placeholder = $(this);
          $placeholder.replaceWith(
            '<p class="customer-description" data-placeholder="' + _.escape($placeholder.wrap('<p/>').parent().html()) + '">' +
              customer.description +
            '</p>'
          );
        });

        // group contributions
        $wrapper.find('.placeholder[data-question-id]').each(function () {
          var $placeholder = $(this),
              questionId = $placeholder.data('question-id');
          $placeholder.replaceWith(
            groupContributionTemplate(questionId, contributionsData, $placeholder)
          );
        })

        // individual contributions
        $wrapper.find('.placeholder[data-contribution-id]').each(function () {
          var $placeholder = $(this),
              contributionId = $placeholder.data('contribution-id');
          $placeholder.replaceWith(
            individualContributionTemplate(contributionId, contributionsData, $placeholder)
          );
        })

        return html ? $wrapper.html() : $wrapper.text();
      },
      depopulatePlaceholders = function () {
        $('.note-editable')
          .find('[data-placeholder]')
          .each(function () {
            $(this).replaceWith(_.unescape($(this).data('placeholder')));
          });
      },
      renderWinStory = function () {
        if (winStory) {
          $('#win-story-editor').html(winStory);
          $('input[type="checkbox"][name="success[win_story_completed]"]').prop('checked', winStoryCompleted);
          $('input[type="hidden"][name="success[win_story_html]"]').val(winStory);
          $('input[type="hidden"][name="success[win_story_text]"]').val(winStoryText);
        }
      },
      initWinStoryRecipientsSelect = function (options, contributionsData) {
        $('select[name="win_story_email[recipients]"]').select2({
          theme: "bootstrap",
          tags: true,
          data: options,
          placeholder: 'Add Recipients',
        });
        $('#win-story-email-modal #add-template-recipients').empty()
        contributionsData
          .invitation_templates
          .filter(function (template) { return template.name !== 'Customer' })
          .forEach(function (template) {
            $('#win-story-email-modal #add-template-recipients').append(
              '<div>' +
                '<label>' +
                  '<input type="checkbox" value="' + template.id + '">' +
                  '<span>&nbsp;&nbsp;' + template.name + '</span>' +
                '</label>' +
              '</div>'
            )
          })
        $('[name="win_story_email[subject]').val($('tr.shown > td:nth-of-type(2)').text())

      };

  // conversion to markdown calls for removal of all whitespace and newlines
  // ref https://stackoverflow.com/questions/1539367
  jQuery.fn.htmlClean = function() {
    this.contents().filter(function() {
      if (this.nodeType != 3) {
        $(this).htmlClean();
        return false;
      } else {
        this.textContent = $.trim(this.textContent);
        return !/\S/.test(this.nodeValue);
      }
    }).remove();
    return this;
  }

  // initialize the win story email editor
  initWinStoryEmailEditor();

  $(document)

    .on('click', '[data-target="#add-template-recipients"]', function (e) {
      $(this).find('i').toggle();
    })

    .on('change', '#win-story-email-modal input[type="checkbox"]', function (e) {
      var dtContributors = $('#prospect-contributors-table').DataTable().rows().data().toArray(),
          templateId = $(this).val(),
          successId = $('tr.shown').data('success-id'),
          recipientIds = $('select[name="win_story_email[recipients]"]').val(),
          templateContributorIds = dtContributors.filter(function (contribution) {
                                     return contribution.invitation_template &&
                                            contribution.invitation_template.id == templateId &&
                                            contribution.success.id == successId;
                                   })
                                     .map(function (contribution) {
                                       return contribution.contributor.id.toString();  //  select2 wants a string
                                     })
      if ($(this).prop('checked')) {
        recipientIds = _.union(recipientIds, templateContributorIds)
      } else {
        recipientIds = _.difference(recipientIds, templateContributorIds)
      }
      $('select[name="win_story_email[recipients]"]').val(recipientIds).trigger('change.select2')
    })

    .on('click', 'button[data-target="#edit-customer-modal"]', function (e) {
      // clicking a row group will normally sort alphabetically; prevent this
      e.stopImmediatePropagation();
      $.ajax({
        url: customerPath($(this).data('customer-id')),
        method: 'get',
        dataType: 'json'
      })
        .done(function (customer, status, xhr) {
          $.when(
            $('#edit-customer-modal .modal-body').append(
              _.template($('#customer-form-template').html())({
                customer: customer
              })
            )
          ).done(function () { initS3Upload(true) })
        })
    })

    .on('click', '.win-story-actions__expand', function (e, isEditClick) {
      var $tr = $('tr.shown'),
          $trChild = $tr.next(),
          expandView = !$('#win-story-editor').hasClass('expanded'),
          editorIsOpen = $('#win-story-editor[contenteditable="true"]').length;

      // the only way to resize with the editor open is to destroy and reinit
      // (but don't proceed if this is an automatic expansion due to clicking Edit button)
      if (editorIsOpen && !isEditClick) {
        $('#win-story-editor').summernote('destroy')
        initWinStoryEditor(
          $tr,
          expandView ? expandedViewHeight($tr, true) : parseInt(defaultViewHeight, 10) - (summernoteToolbarHeight + summernoteResizebarHeight),
          function () {
            depopulatePlaceholders();
            $('.note-customButton').append(
              '<label class="insert-contributions">Insert</label><button type="button" class="help" data-toggle="popover"><i class="fa fa-fw fa-question-circle-o"></i></button>'
            );
            $('.note-customButton button.help').popover({
              container: 'body',
              trigger: 'focus',
              placement: 'left',
              content: customButtonHelpPopoverContent,
              template: '<div class="popover" style="min-width: 400px; role="tooltip"><div class="arrow"></div><div class="popover-content"></div></div>'
            });
            $('.win-story-actions__copy').prop('disabled', true);
          }
        )
      } else {
        $('#win-story-editor').css(
          'height',
          expandView ? expandedViewHeight($tr, editorIsOpen) : defaultViewHeight
        );
      }

      // center
      window.scrollTo(0, $tr.offset().top - (window.innerHeight / 2) + (($trChild.outerHeight() + $tr.outerHeight()) / 2));
      $('#win-story-editor').toggleClass('expanded');
      $(this).find('i').toggle();
      $(this)[0].blur();
    })

    .on('click', '.win-story-actions__edit', function () {
      var $tr = $('tr.shown'),
          $trChild = $tr.next(),
          $expandBtn = $('.win-story-actions__expand'),
          isExpandedView = $('#win-story-editor').hasClass('expanded'),
          initEditor = typeof $('#win-story-editor').data('summernote') !== 'object';
      if (initEditor) {
        initWinStoryEditor(
          $tr,
          expandedViewHeight($tr, true),
          function () {
            depopulatePlaceholders();
            $('.note-customButton').append(
              '<label class="insert-contributions">Insert</label><button type="button" class="help" data-toggle="popover"><i class="fa fa-fw fa-question-circle-o"></i></button>'
            );
            $('.note-customButton button.help').popover({
              container: 'body',
              trigger: 'focus',
              placement: 'left',
              content: customButtonHelpPopoverContent,
              template: '<div class="popover" style="min-width: 400px; role="tooltip"><div class="arrow"></div><div class="popover-content"></div></div>'
            });
            $('.win-story-actions__copy').prop('disabled', true);
          }
        );
      } else {
        // can't use .note-editor height because it will be 0
        // why do I need to do the .last thing for win story??
        $('#win-story-editor')
          .css('height', isExpandedView ? (parseInt($('.form-group.win-story').last().css('height'), 10) - winStoryLabelHeight).toString() + 'px' : defaultViewHeight)
          .prop('contenteditable', false)
          .summernote('destroy')
        $('#win-story-editor').html(populatePlaceholders(true));  // don't save placeholders
        $('.win-story-actions__copy').prop('disabled', false);
        $('input[type="hidden"][name="success[win_story_html]"]')
          .val($('#win-story-editor').html());

        // save changes
        $('[id*="success-form"] button[type="submit"]').trigger('click');

        // scroll to center
        window.scrollTo(0, $tr.offset().top - (window.innerHeight / 2) + (($trChild.outerHeight() + $tr.outerHeight()) / 2));
      }
      if (initEditor && !isExpandedView) {
        $expandBtn.trigger('click', [{ editClick: true }])
      }
      $('#win-story-editor').toggleClass('edit')
      $(this).find('i, span').toggle();
      $(this)[0].blur();
    })

    .on('click', '.win-story-actions__email', function () {
      var winStoryHtml;
      if ($('#win-story-editor').hasClass('edit')) {
        winStoryHtml = $('#win-story-editor').summernote('code');
      } else {
        winStoryHtml = $('#win-story-editor').html();
      }
      $('#win-story-email-editor').summernote('code', winStoryHtml);
      $('#win-story-email-modal').modal('show');
    })

    .on('click', '.win-story-actions__copy', function () {
      var $editor = $('#win-story-editor'),
          copyStr = $editor.hasClass('edit') ? $editor.summernote('code') : $editor.html(),
          listener = function (e) {
            e.clipboardData.setData("text/html", copyStr);
            e.clipboardData.setData("text/plain", copyStr);
            e.preventDefault();
          };
      document.addEventListener("copy", listener);
      document.execCommand("copy");
      document.removeEventListener("copy", listener);
    })

    // Catch Hook to Sheets: https://hooks.zapier.com/hooks/catch/***REMOVED***/***REMOVED***/
    // Catch Hook to Slack: https://hooks.zapier.com/hooks/catch/***REMOVED***/***REMOVED***/
    .on('click', '.win-story-actions__zapier', function () {
      // $.ajax({
      //   url: 'https://hooks.zapier.com/hooks/catch/***REMOVED***/***REMOVED***/',
      //   method: 'POST',
      //   data: {
      //     customer: {
      //       name: customer.name,
      //       description: customer.description,
      //       logo_url: customer.logo_url
      //     },
      //     win_story: winStory,
      //     win_story_text: winStoryText // if this doesn't go through the server first, it will still have extra \r\n\r\n
      //   }
      // })
      //   .done(function (data, status, xhr) {
      //     console.log(data)
      //     console.log(status)
      //     console.log(xhr)
      //   })
    })

    .on('click', '[id*="success-form"] button[type="submit"]', function (e) {
      var $form = $(this).closest('form');
      if ($(this).hasClass('disabled') || $form.data('submitted')) {
        e.preventDefault();
        e.stopImmediatePropagation();
        return false;
      }
      else if ($('#win-story-editor').hasClass('edit')) {
        e.preventDefault();
        e.stopImmediatePropagation();
        // console.log($(populatePlaceholders(true)))
        // console.log($(populatePlaceholders(true)).wrapAll('<div class="wrapper"></div>').parent().htmlClean().html())
        $(this).closest('form')
               .find('input[type="hidden"][name="success[win_story_html]"]')
                 .val(populatePlaceholders(true))
                 .end()
               .find('input[type="hidden"][name="success[win_story_text]"]')
                 .val(populatePlaceholders(false))
                 .end()
               .find('input[type="hidden"][name="success[win_story_markdown]"]')
                 .val($(populatePlaceholders(true)).wrapAll('<div class="wrapper"></div>').parent().htmlClean().html())
                 .end()
               .submit()
        toggleFormWorking($form);
      } else {
        toggleFormWorking($form);
      }
    })

    .on('click', '.customer-logo .upload-image', function () {
      var $previewImg = $(this).closest('.fileinput').find('.fileinput-preview img');
      if ($previewImg.attr('src')) {
        // click on the preview
        $(this).closest('.fileinput').find('.thumbnail')[1].click();
      } else {
        // click on the placeholder
        $(this).closest('.fileinput').find('.thumbnail')[0].click();
      }
    })

    // remove the templated form
    .on('hidden.bs.modal', '#edit-customer-modal', function () {
      $(this).find('.modal-body').empty();
    })

    // on file upload, the customer name will get removed by jasny js => replace it
    .on('change.bs.fileinput', '#customer-form .fileinput', function (e) {
      var customerName = $(this).find('.fileinput-new .customer-name').text().trim(),
          showName = $(this).find('input[type="checkbox"][name="customer[show_name_with_logo]"]')
                            .prop('checked');
      // execute on file upload only
      if ($(e.target).is(':not([type="checkbox"])')) {
        $(this)
          .find('.fileinput-preview')
          .append(
            '<div class="customer-name" style="line-height: 18px !important; ' + (showName ? '' : 'display:none') +  '">' +
              '<span>' + customerName + '</span>' +
            '</div>'
          )
      }
    })
    .on('change', '.customer-logo input[name*="show_name_with_logo"]', function () {
      $(this).closest('.customer-logo').find('.customer-name').toggle();
    })

    .on('click', 'td.success-details', function () {
      var toggleButton = $(this),
          $table = $(this).closest('table'),
          $tr = $(this).closest('tr'),
          $trChild,
          dt = $table.DataTable(),
          successId = $tr.data('success-id'),
          success = dt.row($tr).data(),
          closeForm = function () {
            toggleButton.children().toggle();  // toggle caret icons
            dt.row($tr).child.hide();
            $tr.removeClass('shown active');
          }

      if (dt.row($tr).child.isShown()) {

        var unsavedChanges = !$('[id*="success-form"] button[type="submit"]').prop('disabled');
        if (unsavedChanges) {
          bootbox.confirm({
            size: 'small',
            className: 'confirm-unsaved-changes',
            closeButton: false,
            message: "<i class='fa fa-warning'></i>\xa0\xa0\xa0<span>Unsaved changes will be lost</span>",
            buttons: {
              confirm: {
                label: 'Continue',
                className: 'btn-default'
              },
              cancel: {
                label: 'Cancel',
                className: 'btn-default'
              }
            },
            callback: function (continueWithoutSave) {
              if (continueWithoutSave) {
                closeForm();
              }
            }
          });

        // form is clean
        } else {
          closeForm();
        }

      } else {
        $(this).children().toggle();  // toggle caret icons
        $.when(
          $.ajax({
            url: successPath(successId),
            method: 'get',
            dataType: 'json'
          }),
          $.ajax({
            url: contributionsDataPath(successId),
            method: 'get',
            data: {
              win_story: true
            },
            dataType: 'json'
          })
        )
          .done(function (res1, res2) {
            customer = res1[0].customer;
            winStory = res1[0].win_story_html;
            winStoryText = res1[0].win_story_text;
            winStoryCompleted = res1[0].win_story_completed;
            contributionsData = res2[0].contributions_data;
            // console.log('winStory', winStory);
            // console.log('customer', customer)
            // console.log('contributionsData', contributionsData);
            renderWinStory();
            initWinStoryRecipientsSelect(res1[0].win_story_recipients_select_options, contributionsData);
          })

        // why doesn't this work? it's the same thing! or is it...
        // $.when(getWinStory(successId), getContributionsData(successId))
        //   .done(function (data1, data2) {
        //     console.log('data1', data1)
        //     console.log('data2', data2)
        //     console.log('winStory', winStory);
        //     console.log('contributionsData', contributionsData);
        //     renderWinStory()
        //   })

        dt.row($tr).child(
          _.template($('#success-details-template').html())({
            success: success,
            successPath: successPath(successId)
          })
        ).show();
        $trChild = $tr.next();
        $tr.addClass('shown active');

        // close other open child rows
        $table.find('tr[data-success-id]').not($tr).each(function () {
          if (dt.row($(this)).child.isShown()) {
            dt.row($(this)).child.hide();
            $(this).removeClass('shown active');
            $(this).children('td.success-details').children().toggle();
          }
        });

        // scroll to center
        window.scrollTo(0, $tr.offset().top - (window.innerHeight / 2) + (($trChild.outerHeight() + $tr.outerHeight()) / 2));

        // enable Save button on input
        $tr.next().one('input', function (e) {
          $(this).find('button[type="submit"]').prop('disabled', false);
        });

      }

    })

    // scroll boundaries
    // (removed these: #win-story-editor, .note-editable)
    .on('wheel', '.dropdown-menu.summernote-custom', function (e) {
      var maxY = $(this).prop('scrollHeight') - $(this).prop('offsetHeight');
      // If this event looks like it will scroll beyond the bounds of the element,
      // prevent it and set the scroll to the boundary manually
      if ($(this).prop('scrollTop') + e.originalEvent.deltaY < 0 ||
          $(this).prop('scrollTop') + e.originalEvent.deltaY > maxY) {
        e.preventDefault();
        $(this).prop('scrollTop', Math.max(0, Math.min(maxY, $(this).prop('scrollTop') + e.originalEvent.deltaY)));
      }
    });

}
