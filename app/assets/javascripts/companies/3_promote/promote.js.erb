
//= require ./promoted_stories
//= require ./gads_form

function promote () {

  // console.log('promote')

  // TODO: check file size
  // http://stackoverflow.com/questions/39488774
  var initFormValidator = function () {
        // console.log('initFormValidator()')
        $('#gads-form').validator({
          focus: false,
          disable: false,
          custom: {
            'max-file-size': function ($fileInput) {
              if ($fileInput[0].files[0].size > $fileInput.data('max-file-size')) {
                return "File size is too large";
              }
            },
            'img-size-error': function ($fileInput, justChecking) {
              // console.log('img-size-error()')
              // only want to validate new images; a url indicates an existing image
              // => will need to manually trigger validation on successful upload
              var $img = $fileInput.closest('.form-group').find('img');

              // if uploading a new default over an existing one, validator will first try
              // to validate the existing image => ignore this
              if ($img.attr('src').includes('http')) return false;

              var error = null,
                  type = $fileInput.closest('.ad-image-card').find('input[name*="[type]"]').val(),
                  width = $img[0].naturalWidth,
                  height = $img[0].naturalHeight,
                  minWidth = type && $fileInput.data('img-size-error').split('x')[0],
                  minHeight = type && $fileInput.data('img-size-error').split('x')[1],
                  ratio = width / height,
                  isTooSmall = function () {
                    if (!type) return 'Image is incorrect size';
                    return (width < minWidth || height < minHeight) ?
                      'Image is incorrect size' :
                      false
                  },
                  hasBadAspectRatio = function () {
                    if (!type) return 'Image is incorrect size';
                    var isValidSquare = ['SquareImage', 'SquareLogo'].includes(type) &&
                                        ratio >= 0.99 && ratio <= 1.01,
                        isValidLandscapeImage = type === 'LandscapeImage' &&
                                                ratio >= 1.8909 && ratio <= 1.929,
                        isValidLandscapeLogo = type === 'LandscapeLogo' &&
                                               ratio >= 3.99 && ratio <= 4.01;
                    return (isValidSquare || isValidLandscapeImage || isValidLandscapeLogo) ?
                      false :
                      'Image is incorrect size';
                  };
              error = isTooSmall() || hasBadAspectRatio();
              // failed
              if (error) return justChecking ? true : error;
              // passed
              if (!justChecking) initS3Upload();
            },
            'fileupload-init-error': function ($fileInput) {
              // console.log('fileupload-init-error()')
              var validator = this,
                  $formGroup = $fileInput.closest('.form-group'),
                  $img = $formGroup.find('img'),
                  fileSizeIsValid = function () {
                    return !validator.options.custom['max-file-size']($fileInput);
                  },
                  imageSizeIsValid = function () {
                    return !validator.options.custom['img-size-error']($fileInput, true);
                  },
                  // MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver,
                  observer = new MutationObserver(function (mutations) {
                    var isEnabledSubmit = function (mutation) {
                      return mutation.type === 'attributes' &&
                             mutation.attributeName === 'disabled' &&
                             !mutation.target.disabled;
                    }
                    mutations.forEach(function (mutation) {
                      if (isEnabledSubmit(mutation)) {
                        // $(mutation.target).removeClass('has-success');
                        observer.disconnect();
                        $formGroup.addClass('to-be-added');
                        return;
                      }
                    });
                  });

              // bs validator is going to first validate the existing img (which is not what we want)
              // no big deal => existing image is expected to be valid
              if ($img.attr('src').includes('http')) return false;

              // don't want to initialize s3 if the image isn't valid (because it's currently set to autoupload)
              if (fileSizeIsValid() && imageSizeIsValid()) {
                try {
                  // check if initialized by trying to read an option
                  $fileInput.fileupload('option', 'url')

                  // at this point we are done with validation and can supply our own to-be-added class,
                  // because has-success only indicates (a) bs jasny uploaded a local file or
                  // (b) bs validator validated an existing image (neither what we want)
                  // observer.observe($imageCard.find('button[type="submit"]')[0], { attributes: true });

                  // => actually, validation is really done after s3 upload confirmation
                } catch (e) {
                  return 'Error uploading file' // really error initializing upload
                }
              } else {
                // do nothing => size validation failed and will return true
              }
            },
            'upload-error': function ($fileInput) {
              // might take a look at successful s3 upload here,
              // but means would have to run validation after some timeout
            }
          }
        })
      },
      initPopovers = function () {
        $('#gads-form button.image-requirements')
          .popover({
            html: true,
            container: 'body',
            template: '<div class="popover image-requirements" role="tooltip"><div class="arrow"></div><h3 class="popover-title label-secondary"></h3><div class="popover-content"></div></div>',
            content: function () {
              return '<h4><strong>Square ' + ($(this).is('.marketing') ? 'Image' : 'Logo') + '</strong></h4>&nbsp;&nbsp;' +
                     '<span>(' + ($(this).is('.marketing') ? 'required' : 'optional/recommended') + ')</span>' +
                     '<ul>' +
                       '<li>Minimum dimensions: ' + $(this).data('square-min') + '</li>' +
                       '<li>Aspect ratio within 1% of ' + $(this).data('square-ratio') + '</li>' +
                       ($(this).is('.logos') ? '<li>Suggested dimensions: ' + $(this).data('square-suggest') + '</li>' : '') +
                       '<li>Maximum size: 5MB (5,242,880 bytes)</li>' +
                       '<li>Image may be cropped horizontally up to 5% on each side</li>' +
                       '<li>Text may cover no more than 20% of the image</li>' +
                       ($(this).is('.logos') ? '<li>Transparent background is best, but only if the logo is centered</li>' : '') +
                     '</ul>' +
                     '<h4><strong>Landscape ' + ($(this).is('.marketing') ? 'Image' : 'Logo') + '</strong></h4>&nbsp;&nbsp;' +
                     '<span>(' + ($(this).is('.marketing') ? 'required' : 'optional/recommended') + ')</span>' +
                     '<ul>' +
                       '<li>Minimum dimensions: ' + $(this).data('landscape-min') + '</li>' +
                       '<li>Aspect ratio within 1% of ' + $(this).data('landscape-ratio') + '</li>' +
                       ($(this).is('.logos') ? '<li>Suggested dimensions: ' + $(this).data('landscape-suggest') + '</li>' : '') +
                       '<li>Maximum size: 5MB (5,242,880 bytes)</li>' +
                       '<li>Image may be cropped horizontally up to 5% on each side</li>' +
                       '<li>Text may cover no more than 20% of the image</li>' +
                       ($(this).is('.logos') ? '<li>Transparent background is best, but only if the logo is centered</li>' : '') +
                     '</ul>';
            }
          });
        // $('#ads-images-modal li')
        //   .popover({
        //     container: 'body',
        //   })
      };

  initFormValidator();
  initTooltips();
  initPopovers();

}

function promoteListeners () {

  promotedStoriesListeners();
  promoteSettingsListeners();

  var readyForGads = function (requirementsChecklist) {
        var $items = $('#gads-checklist li');
        $items.eq(0).addClass(requirementsChecklist.promote_enabled ? 'checked' : 'unchecked');
        $items.eq(1).addClass(requirementsChecklist.default_headline ? 'checked' : 'unchecked');
        $items.eq(2).addClass(
            requirementsChecklist.square_image &&
            requirementsChecklist.landscape_image &&
            requirementsChecklist.valid_defaults ? 'checked' : 'unchecked'
          );
        return $items.toArray().every(function (item) {
                  return $(item).hasClass('checked') ? true : false;
                });
      };

  $(document)

    .on('click', '#gads-set-reset button', function () {
      var $btn = $(this),
          storyIds = [],
          storyResult = function (storyTitle, newGads) {
            var errors = newGads.errors;
            return '<li class="' + (errors ? 'errors' : 'success') + '">' +
                      '<p>' + storyTitle + '</p>' +
                      '<p>' + (errors ? errors[0] : 'topic: ' + newGads.topic.ad_id) + '</p>' +
                      (errors ? '' : '<p>retarget: ' + newGads.retarget.ad_id + '</p>') +
                      // '<p>retarget ad: ' + (errors ? errors[1] : newGads.retarget.ad_id) + '</p>' +
                   '</li>'
          },
          resetGads = function () {
            if (storyIds.length === 0) {
              $btn.prop('disabled', false).children().toggle();
              $('#gads-checklist li').removeClass('checked');
              // TODO: add a results section (# stories created, etc)
              return;  // terminate if array exhausted
            } else if (storyIds.length)

            $.ajax({
              url: '/stories/' + storyIds.shift() + '/create_gads',
              method: 'put',
              dataType: 'json'
            })
              .done(function (data, status, xhr) {
                console.log(data);
                var story = data.story,
                    newGads = data.newGads;
                if ($('#gads-results__wrapper').is(':not(:visible)')) {
                  $('#gads-results__wrapper').show();
                }
                $('#gads-results').append(storyResult(story.title, newGads));
                // TODO: add to promoted stories table
                resetGads();
              })
          };

      $('#gads-checklist li').removeClass('checked unchecked');
      $('#gads-results__wrapper').find('li').remove().end().hide();
      $btn.prop('disabled', true).children().toggle();
      $.ajax({
        url: $btn.data('action'),
        method: 'get',
        dataType: 'json'
      })
        .done(function (data, status, xhr) {
          console.log(data)
          if (readyForGads(data.requirementsChecklist)) {
            storyIds = data.publishedStoryIds;
            resetGads();
          } else {
            $btn.prop('disabled', false).children().toggle();
          }
        })

    })

    .on('click', '#promote .layout-sidebar a', function () {
      Cookies.set('promote-tab', $(this).attr('href'));
    })

    // changing the scroll-on-focus offset for bootstrap validator isn't working,
    // so do this instead...
    .on('click', 'a[href="#promote-settings"]', function () {
      if ($('#company_adwords_short_headline').val() === '') {
        var position = $(window).scrollTop();
        $('#company_adwords_short_headline').focus();
        $(window).scrollTop(position);
      }
    })

    // manually hide the tooltip when navigating away (since it has container: body)
    .on('mouseout', '#promote-settings', function () {
      $('[data-toggle="tooltip"]').tooltip('hide');
    })

    .on('click', 'td.promoted-story-title .DTE_Form_Buttons > :nth-child(2)', function () {
      $(this).find('span, .fa-spin').toggle();
    });
}













