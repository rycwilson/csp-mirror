
function promoteSettingsListeners () {

  var checkImageLoaded, checkInputInitialized, checkForNewImage, // some timer ids to handle image upload
      validateForm = function () {
        $('#gads-form').validator('update').validator('validate');
      },
      fileInputWasInitialized = function ($fileInput) {
        try {
          $fileInput.fileupload('option', 'url');
          clearInterval(checkInputInitialized);
          // console.log('ready to upload')
          $fileInput.trigger('change');  // triggers upload to s3
          return true;
        } catch (error) {
          return false;
        }
      },
      // TODO: don't give it a type if it was added to the wrong list!
      determineImageType = function ($imageCard, $img) {
        var type = $imageCard.is('.gads-image') ? 'Image' : 'Logo',
            width = $img[0].naturalWidth,
            height = $img[0].naturalHeight,
            ratio = width / height,
            isValidSquare = (ratio >= 0.99 && ratio <= 1.01),
            isValidLandscapeImage = type === 'Image' &&
                                    (ratio >= 1.8909 && ratio <= 1.929),
            isValidLandscapeLogo = type === 'Logo' &&
                                   (ratio >= 3.99 && ratio <= 4.01),
            minSizes = {
              'SquareImage': '<%= RESPONSIVE_AD_SQUARE_IMAGE_MIN %>',
              'LandscapeImage': '<%= RESPONSIVE_AD_LANDSCAPE_IMAGE_MIN %>',
              'SquareLogo': '<%= RESPONSIVE_AD_SQUARE_LOGO_MIN %>',
              'LandscapeLogo': '<%= RESPONSIVE_AD_LANDSCAPE_LOGO_MIN %>'
            },
            updateClassAttr = function (shape) {
              var replacementText = shape ? '$&' + '--' + shape : '';
              $imageCard.attr(
                'class',
                $imageCard.attr('class').replace(/gads-(image|logo)/, replacementText)
              )
            };
        if (isValidSquare) {
          type = type.replace(/^/, 'Square');
          updateClassAttr('square');
        } else if (isValidLandscapeImage || isValidLandscapeLogo) {
          type = type.replace(/^/, 'Landscape');
          updateClassAttr('landscape');
        } else {
          updateClassAttr(false);
        }

        // if not either a valid square or landscape, set the type input to blank
        // => will cause validation failure
        if (type.match(/(Square|Landscape)/)) {
          // console.log('type is ', type)
          $imageCard
            .find('input:hidden[name*="[type]"]').val(type).end()
            .find('input:file').attr('data-img-size-error', minSizes[type]);
        } else {
          $imageCard.find('input:hidden[name*="[type]"]').val('');
        }
      },
      imageDidLoad = function ($imageCard, $img) {
        if ($img[0].complete) {
          clearInterval(checkImageLoaded);
          var $fileInput = $imageCard.find('input:file');
          if ($imageCard.is('.new-ad-image')) {
            if ($imageCard.is(':not(.gads-default)')) determineImageType($imageCard, $img);
            $imageCard.removeClass('new-ad-image hidden')[0]
                      .scrollIntoView({ block: 'center', behavior: 'smooth' });
            if (!fileInputWasInitialized($fileInput)) {
              checkInputInitialized = setInterval(fileInputWasInitialized, 100, $fileInput)
            }
          }
          // must run this for both default and new images
          // default image => left to its default behavior, bs validator will validate the existing image
          //  instead of the freshly uploaded one
          // new image => must update the validator to account for the new input
          validateForm();
          return true;
        }
      },
      isPrematureSuccess = function ($formGroup, mutation) {
        var isImageSuccess = $(mutation.target).is($formGroup) &&
              mutation.type === 'attributes' &&
              mutation.attributeName === 'class' &&
              $(mutation.target).is('.has-success'),
            isPremature = !($(mutation.target).is('.to-be-added'));
        return isImageSuccess && isPremature;
      },
      isSuccessfulUpload = function ($imageUrlInput, $formGroup, mutation) {
        return $(mutation.target).is($imageUrlInput) &&
               $formGroup.is(':not(.has-error)') &&
               mutation.type === 'attributes' &&
               mutation.attributeName === 'value';
      },
      handleS3Upload = function ($imageCard) {
        var $formGroup = $imageCard.find('.form-group.fileinput'),
            $img = $formGroup.find('img'),
            $imageUrlInput = $imageCard.find('input[name*="[image_url]"]:not([type="file"])'),
            // MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver,
            formGroupObserver = new MutationObserver(function (mutations) {
              // jasny bootstrap is prematurely adding the has-success class;
              // remove and add manually pending successful validation
              mutations.forEach(function (mutation) {
                if (isPrematureSuccess($formGroup, mutation)) {
                  $formGroup.removeClass('has-success');
                }
              });
            }),
            inputObserver = new MutationObserver(function (mutations) {
              mutations.forEach(function (mutation) {
                if (isSuccessfulUpload($imageUrlInput, $formGroup, mutation)) {
                  // console.log('successful upload')
                  inputObserver.disconnect();
                  formGroupObserver.disconnect();
                  $formGroup.addClass('to-be-added has-success');
                }
              });
            });

        // observing the image card causes infinite mutations for some reason
        // console.log('attaching observer', $imageCard[0])
        inputObserver.observe($imageUrlInput[0], { attributes: true });
        formGroupObserver.observe($formGroup[0], { attributes: true });
        if (!imageDidLoad($imageCard, $img)) {
          checkImageLoaded = setInterval(imageDidLoad, 100, $imageCard, $img);
        }
      },
      addPrevDefaultHiddenInputs = function ($defaultImageCard) {
        var index = $('li.ad-image-card').length,
            prevDefaultId = $defaultImageCard.find('input[name*="[id]"]').val(),
            prevDefaultType = $defaultImageCard.find('input[name*="[type]"]').val(),
            // make sure to specify hidden here or it will select the file input
            prevDefaultUrl = $defaultImageCard.find('input:hidden[name*="[image_url]"]').val(),
            // prevDefaultUrl = $defaultImageCard.data('image-url'),
            $prevDefaultHiddenInputs = $('<div id="previous-default-hidden-inputs" class="hidden">' +
              '<input type="hidden"' +
                    ' name="company[adwords_images_attributes][' + index + '][id]"' +
                    ' value="' + prevDefaultId + '">' +
              '<input type="hidden"' +
                    ' name="company[adwords_images_attributes][' + index + '][type]"' +
                    ' value="' + prevDefaultType + '">' +
              '<input type="hidden"' +
                    ' name="company[adwords_images_attributes][' + index + '][image_url]"' +
                    ' value="' + prevDefaultUrl + '">' +
              '<input type="hidden"' +
                    ' name="company[adwords_images_attributes][' + index + '][default]"' +
                    ' value="false">' +
              '<input type="checkbox"' +
                    ' name="company[adwords_images_attributes][' + index + '][default]"' +
                    ' value="true">' +
            '</div>');
        if (prevDefaultId === '') return false;
        $('#gads-form').append($prevDefaultHiddenInputs);
      },
      imageIsNew = function ($imageCard, $img) {
        if ($img.attr('src').includes('data:')) {
          clearInterval(checkForNewImage);

          // capture the previous default and add to the end of the list
          if ($imageCard.is('.gads-default')) addPrevDefaultHiddenInputs($imageCard);
          handleS3Upload($imageCard);
          return true;
        }
      };

  $(document)

    .on('input', '[name="company[adwords_short_headline]"]', function () {
      var $input = $(this), $btn = $(this).next();
      $input.is(':valid') ? $btn.show().prop('disabled', false) : $btn.prop('disabled', true);
    })

    .on('show.bs.tab', '.image-library__header a[data-toggle="tab"]', function () {
      if ($(this).is(':not(.active)')) {
        $('.image-library__header .btn-group').children().toggleClass('active');
      }
    })

    // upload a new ad image
    .on('click', '.image-library .btn-add', function () {
      var $thisList = $(this).closest('[id*="image-library"]').find('ul'),
          $otherList = $('.image-library').find('ul').not($thisList);
      $.when(
          $thisList.append(
            _.template($('#ad-image-card-template').html())({
              id: '',
              type: $thisList.is('#image-library__marketing ul') ? 'Image' : 'Logo',
              typeClassName: $thisList.is('#image-library__marketing ul') ? 'gads-image' : 'gads-logo',
              imageIndex: $thisList.children('li').length + $otherList.children('li').length,
              imageUrl: ''
            })
          )
        )
        .done(function () {
          $('li.new-ad-image input:file')[0].click();
        })
    })

    .on('change.bs.fileinput', '.gads-default', function () {
      // wait until the img src attribute has been set to the new image
      var $imageCard = $(this), $img = $(this).find('img');
      if (!imageIsNew($imageCard, $img)) {
        checkForNewImage = setInterval(imageIsNew, 100, $imageCard, $img);
      }
    })

    .on('change.bs.fileinput', '.new-ad-image', function (e) {
      handleS3Upload($(this));
    })

    .on('valid.bs.validator', '#gads-form', function (e) {
      // console.log('valid.bs.validator', e.relatedTarget)
    })

    .on('invalid.bs.validator', '#gads-form', function (e) {
      var $input = $(e.relatedTarget);
      // console.log('invalid.bs.validator', e.relatedTarget, e.detail)
      if ($input.is('[name*="short_headline"]')) {

      } else if ($input.is(':file')) {
        // could theoretically do a reset here, but doing so would switch view to fileinput-new;
        // error message is containeed in fileinput-preview (for better or worse)
        $input.closest('.fileinput').find('img').remove();
      }
    })

    /**
     *  assign a new default
     */
    .on('change', '.ad-image-card:not(.gads-default) input:checkbox[name*="default"]', function () {
      var $changedInput = $(this),
          typeClassName = $changedInput
                            .closest('.ad-image-card')
                            .attr('class')
                            .match(/(gads-image|gads-logo)--(square|landscape)/)[0],
          $defaultImageCard = $('.gads-default.' + typeClassName),
          $otherDefaultInputs = $('.ad-image-card.' + typeClassName + ':not(.gads-default) input:checkbox[name*="default"]')
                                  .filter(function () { return !$(this).is($changedInput) });
      $changedInput.closest('.form-group').toggleClass('to-be-default');
      if ($changedInput.prop('checked')) {
        $otherDefaultInputs.prop('checked', false).closest('.form-group').removeClass('to-be-default');
        $defaultImageCard.find('input:checkbox[name*="default"]').prop('checked', false);
      } else if ($otherDefaultInputs.filter(function () { return $(this).prop('checked'); }).length === 0) {
        $defaultImageCard.find('input:checkbox[name*="default"]').prop('checked', true);
        $('#previous-default-hidden-inputs').remove();
      }
    })

    /**
     *  remove
     */
    .on('click', '.ad-image-card .remove-image', function () {
      // console.log('remove image')
      $(this).closest('.ad-image-card')
             .find('input:checkbox[name*="_destroy"]').prop('checked', true).end()
             .find('.form-group').addClass('to-be-removed');
    })

    /**
     *  cancel
     */
    .on('click', '#gads-form .btn-cancel', function () {
      // console.log('cancel')
      var $imageCard = $(this).closest('.ad-image-card'),
          $formGroup = $imageCard.find('.form-group'),
          shouldRemoveImage = $imageCard.is(':not(.gads-default)') &&
            ($formGroup.is('.to-be-added') || $formGroup.is('.has-error'));

      if ($imageCard.is('.gads-default')) {
        $imageCard.find('.fileinput').fileinput('reset');

        // remove the hidden inputs that would have added the previous default as a new image
        $('#previous-default-hidden-inputs').remove();
      }

      // TODO but don't allow .btn-cancel to be clicked while submitting form!
      if (shouldRemoveImage) $imageCard.remove();

      if ($formGroup.is('.to-be-default') || $formGroup.is('.to-be-removed')) {
        $imageCard.find('input:checkbox').prop('checked', false).trigger('change');
      }

      // this covers all
      $formGroup.removeClass('to-be-added to-be-removed to-be-default has-success has-error has-danger');
    })

    /**
     *  submit the form
     */
    .on('click', '#gads-form button:submit', function (e) {
      if ($(this).is('.disabled') || $(this).data('submitted')) {
        e.preventDefault();
        e.stopImmediatePropagation();
        return false;
      }
      e.preventDefault();
      var $submitBtn = $(this),
          $form = $('#gads-form'),
          $formGroup = $(this).closest('.form-group'),  // the submitted form group
          $imageCard = $formGroup.closest('.ad-image-card').length ?
                         $formGroup.closest('.ad-image-card') : null,
          typeClassName = $imageCard &&
              $imageCard.attr('class').match(/(gads-image|gads-logo)--(square|landscape)/)[0],
          isPrevDefaultInput = function (input) {
            var $defaultImageCard = $('.ad-image-card.gads-default.' + typeClassName),
                defaultImageIsPresent = $defaultImageCard.data('image-url');
            return $('#previous-default-hidden-inputs').find(input).length ||
                   (defaultImageIsPresent &&
                    $defaultImageCard.find(input).length &&
                    $imageCard.find('.to-be-default').length);
          }
          disableInactiveInput = function (index, input) {
                isInactiveInput = !isPrevDefaultInput(input) &&
                                  ( ($imageCard && $imageCard.find(input).length === 0) ||
                                    (!$imageCard && $formGroup.find(input).length === 0) );
            if (isInactiveInput) input.disabled = true;
          },
          isCompanyInput = function (index, input) {
            return input.name.match(/company\[\w+\]/);
          },
          submitForm = function () {
            if ($submitBtn.is(':not(.btn-remove)')) toggleFormWorking($form, $submitBtn);
            $form.submit();
          };

      if ($imageCard && $imageCard.is('.gads-default') && $formGroup.is('.to-be-added')) {
        $imageCard.find('input:hidden[name*="[id]"]').val('');
      }

      $form.find('input').filter(isCompanyInput).each(disableInactiveInput);
      // console.log('form inputs', decodeURIComponent($form.serialize()).split('&'))
      submitForm();

      if ($formGroup.is('.to-be-removed')) $imageCard.remove();

    })

}