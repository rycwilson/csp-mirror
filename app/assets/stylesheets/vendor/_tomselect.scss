select.tomselected + .ts-wrapper {
  &:not(.has-items):not(.invitation-template-inline-select) {
    height: 34px;
  }

  &.invitation-template-inline-select {
    height: 100%;
    
    &:not(.focus) > .ts-control {
      border-color: transparent;
    }
  }

  &.focus > .ts-control {
    box-shadow: 0 0 0 0.2rem rgba(3, 155, 229, 0.25);
    border-color: $brand-primary;
  }

  > .ts-control {
    height: 100%;

    [data-value="0"] {
      color: #666;
    }

    // change the caret color
    &::after {
      border-color: #6c757d transparent transparent transparent;
    } 
  }

  form.was-validated &.invalid.focus .ts-control {
    box-shadow: 0 0 0 0.2rem rgba(169, 68, 66, 0.25);  // matches $state-danger-text
    border-color: $state-danger-text;
  }

  &.dropdown-active .ts-control::after {
    border-color: transparent transparent #6c757d transparent;
  }

  &.single.readonly {
    cursor: not-allowed;

    button {
      display: none;
    }

    .ts-control {
      pointer-events: none;
    }
  }

  &.multi.has-items {
    .ts-control {
      padding: 8px;
    }
    
    .item {
      display: flex;
      align-items: center;
      padding: 2px 0 2px 10px;
    }

    .clear-button {
      font-size: 20px;
      padding: 0 10px;
    }
  }
}

.ts-dropdown {
  .create,
  .create-contact {
    padding: 0.5em 0.75em;
    color: $text-color;

    &:not(.active) :not(.user-input) {
      color: #666;
    }

    :nth-child(2) {
      font-weight: 600;
    }

    i {
      margin-right: 0.5em;
    }
  }

  .active.create,
  .active {
    color: white;
    background-color: $ts-active-option-background;
  }

  .optgroup-header {
    padding: 0.75rem;
    background: $medium-gray;
    font-size: 13px;
  }

  .option {
    padding: 4px 0.75rem;
  }
}

.plugin-clear_button,   // needed for specificity in single tom-select
.ts-wrapper {
  .clear-button {
    right: 2.75rem;
    transition: opacity 0s;
    background: transparent;
    box-shadow: none;
    font-size: 1.75rem;
    color: #6c757d;
  }
}